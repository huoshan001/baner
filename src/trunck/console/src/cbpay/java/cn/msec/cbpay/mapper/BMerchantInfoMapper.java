package cn.msec.cbpay.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

import cn.msec.cbpay.entity.BMerchantInfo;
import cn.msec.cbpay.entity.BMerchantInfoExample;
import cn.msec.cbpay.entity.BMerchantInfoKey;
import cn.msec.ojpa.msc.mysql.StaticTableDaoSupport;

public interface BMerchantInfoMapper
		extends
		StaticTableDaoSupport<BMerchantInfo, BMerchantInfoExample, BMerchantInfoKey> {
	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	@SelectProvider(type = BMerchantInfoSqlProvider.class, method = "countByExample")
	int countByExample(BMerchantInfoExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	@DeleteProvider(type = BMerchantInfoSqlProvider.class, method = "deleteByExample")
	int deleteByExample(BMerchantInfoExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	@Delete({ "delete from B_MERCHANT_INFO",
			"where MERCHANTID = #{merchantid,jdbcType=VARCHAR}" })
	int deleteByPrimaryKey(BMerchantInfoKey key);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	@Insert({
			"insert into B_MERCHANT_INFO (MERCHANTID, MERCHANTNAME, ",
			"MERCHANTDESC, ISENCRYPT, ",
			"ENCRYPT_ALGORITHM, ISSIGNATURE, ",
			"SIGNATURE_ALGORITHM, PUBLIC_KEY_FILE, ",
			"KEY_FILE_TYPE, ENCRYPT_TYPE, ",
			"SIGNATURE_TYPE, KEY_STORE_FILE, ",
			"KEY_STORE_ALIAS, KEY_STORE_PASSWORD, ",
			"COUNTRY_CODE, CURRENCY_TYPE, ",
			"MERPLATACCTALIAS, PROTOCOLNO, ",
			"VALID, POUNDAGEFLAG, POUNDAGERATE, ",
			"CONTRACT_NO, MERCHANT_PRINCIPAL, ",
			"PRINCIPAL_TEL)",
			"values (#{merchantid,jdbcType=VARCHAR}, #{merchantname,jdbcType=VARCHAR}, ",
			"#{merchantdesc,jdbcType=VARCHAR}, #{isencrypt,jdbcType=VARCHAR}, ",
			"#{encryptAlgorithm,jdbcType=VARCHAR}, #{issignature,jdbcType=VARCHAR}, ",
			"#{signatureAlgorithm,jdbcType=VARCHAR}, #{publicKeyFile,jdbcType=VARCHAR}, ",
			"#{keyFileType,jdbcType=VARCHAR}, #{encryptType,jdbcType=VARCHAR}, ",
			"#{signatureType,jdbcType=VARCHAR}, #{keyStoreFile,jdbcType=VARCHAR}, ",
			"#{keyStoreAlias,jdbcType=VARCHAR}, #{keyStorePassword,jdbcType=VARCHAR}, ",
			"#{countryCode,jdbcType=CHAR}, #{currencyType,jdbcType=CHAR}, ",
			"#{merplatacctalias,jdbcType=CHAR}, #{protocolno,jdbcType=CHAR}, ",
			"#{valid,jdbcType=CHAR}, #{poundageflag,jdbcType=CHAR}, #{poundagerate,jdbcType=DECIMAL}, ",
			"#{contractNo,jdbcType=VARCHAR}, #{merchantPrincipal,jdbcType=VARCHAR}, ",
			"#{principalTel,jdbcType=VARCHAR})" })
	int insert(BMerchantInfo record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	@InsertProvider(type = BMerchantInfoSqlProvider.class, method = "insertSelective")
	int insertSelective(BMerchantInfo record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	@SelectProvider(type = BMerchantInfoSqlProvider.class, method = "selectByExample")
	@Results({
			@Result(column = "MERCHANTID", property = "merchantid", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "MERCHANTNAME", property = "merchantname", jdbcType = JdbcType.VARCHAR),
			@Result(column = "MERCHANTDESC", property = "merchantdesc", jdbcType = JdbcType.VARCHAR),
			@Result(column = "ISENCRYPT", property = "isencrypt", jdbcType = JdbcType.VARCHAR),
			@Result(column = "ENCRYPT_ALGORITHM", property = "encryptAlgorithm", jdbcType = JdbcType.VARCHAR),
			@Result(column = "ISSIGNATURE", property = "issignature", jdbcType = JdbcType.VARCHAR),
			@Result(column = "SIGNATURE_ALGORITHM", property = "signatureAlgorithm", jdbcType = JdbcType.VARCHAR),
			@Result(column = "PUBLIC_KEY_FILE", property = "publicKeyFile", jdbcType = JdbcType.VARCHAR),
			@Result(column = "KEY_FILE_TYPE", property = "keyFileType", jdbcType = JdbcType.VARCHAR),
			@Result(column = "ENCRYPT_TYPE", property = "encryptType", jdbcType = JdbcType.VARCHAR),
			@Result(column = "SIGNATURE_TYPE", property = "signatureType", jdbcType = JdbcType.VARCHAR),
			@Result(column = "KEY_STORE_FILE", property = "keyStoreFile", jdbcType = JdbcType.VARCHAR),
			@Result(column = "KEY_STORE_ALIAS", property = "keyStoreAlias", jdbcType = JdbcType.VARCHAR),
			@Result(column = "KEY_STORE_PASSWORD", property = "keyStorePassword", jdbcType = JdbcType.VARCHAR),
			@Result(column = "COUNTRY_CODE", property = "countryCode", jdbcType = JdbcType.CHAR),
			@Result(column = "CURRENCY_TYPE", property = "currencyType", jdbcType = JdbcType.CHAR),
			@Result(column = "MERPLATACCTALIAS", property = "merplatacctalias", jdbcType = JdbcType.CHAR),
			@Result(column = "PROTOCOLNO", property = "protocolno", jdbcType = JdbcType.CHAR),
			@Result(column = "VALID", property = "valid", jdbcType = JdbcType.CHAR),
			@Result(column = "POUNDAGEFLAG", property = "poundageflag", jdbcType = JdbcType.CHAR),
			@Result(column = "POUNDAGERATE", property = "poundagerate", jdbcType = JdbcType.DECIMAL),
			@Result(column = "CONTRACT_NO", property = "contractNo", jdbcType = JdbcType.VARCHAR),
			@Result(column = "MERCHANT_PRINCIPAL", property = "merchantPrincipal", jdbcType = JdbcType.VARCHAR),
			@Result(column = "PRINCIPAL_TEL", property = "principalTel", jdbcType = JdbcType.VARCHAR) })
	List<BMerchantInfo> selectByExample(BMerchantInfoExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	@Select({
			"select",
			"MERCHANTID, MERCHANTNAME, MERCHANTDESC, ISENCRYPT, ENCRYPT_ALGORITHM, ISSIGNATURE, ",
			"SIGNATURE_ALGORITHM, PUBLIC_KEY_FILE, KEY_FILE_TYPE, ENCRYPT_TYPE, SIGNATURE_TYPE, ",
			"KEY_STORE_FILE, KEY_STORE_ALIAS, KEY_STORE_PASSWORD, COUNTRY_CODE, CURRENCY_TYPE, ",
			"MERPLATACCTALIAS, PROTOCOLNO, VALID, POUNDAGEFLAG, POUNDAGERATE, CONTRACT_NO, ",
			"MERCHANT_PRINCIPAL, PRINCIPAL_TEL", "from B_MERCHANT_INFO",
			"where MERCHANTID = #{merchantid,jdbcType=VARCHAR}" })
	@Results({
			@Result(column = "MERCHANTID", property = "merchantid", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "MERCHANTNAME", property = "merchantname", jdbcType = JdbcType.VARCHAR),
			@Result(column = "MERCHANTDESC", property = "merchantdesc", jdbcType = JdbcType.VARCHAR),
			@Result(column = "ISENCRYPT", property = "isencrypt", jdbcType = JdbcType.VARCHAR),
			@Result(column = "ENCRYPT_ALGORITHM", property = "encryptAlgorithm", jdbcType = JdbcType.VARCHAR),
			@Result(column = "ISSIGNATURE", property = "issignature", jdbcType = JdbcType.VARCHAR),
			@Result(column = "SIGNATURE_ALGORITHM", property = "signatureAlgorithm", jdbcType = JdbcType.VARCHAR),
			@Result(column = "PUBLIC_KEY_FILE", property = "publicKeyFile", jdbcType = JdbcType.VARCHAR),
			@Result(column = "KEY_FILE_TYPE", property = "keyFileType", jdbcType = JdbcType.VARCHAR),
			@Result(column = "ENCRYPT_TYPE", property = "encryptType", jdbcType = JdbcType.VARCHAR),
			@Result(column = "SIGNATURE_TYPE", property = "signatureType", jdbcType = JdbcType.VARCHAR),
			@Result(column = "KEY_STORE_FILE", property = "keyStoreFile", jdbcType = JdbcType.VARCHAR),
			@Result(column = "KEY_STORE_ALIAS", property = "keyStoreAlias", jdbcType = JdbcType.VARCHAR),
			@Result(column = "KEY_STORE_PASSWORD", property = "keyStorePassword", jdbcType = JdbcType.VARCHAR),
			@Result(column = "COUNTRY_CODE", property = "countryCode", jdbcType = JdbcType.CHAR),
			@Result(column = "CURRENCY_TYPE", property = "currencyType", jdbcType = JdbcType.CHAR),
			@Result(column = "MERPLATACCTALIAS", property = "merplatacctalias", jdbcType = JdbcType.CHAR),
			@Result(column = "PROTOCOLNO", property = "protocolno", jdbcType = JdbcType.CHAR),
			@Result(column = "VALID", property = "valid", jdbcType = JdbcType.CHAR),
			@Result(column = "POUNDAGEFLAG", property = "poundageflag", jdbcType = JdbcType.CHAR),
			@Result(column = "POUNDAGERATE", property = "poundagerate", jdbcType = JdbcType.DECIMAL),
			@Result(column = "CONTRACT_NO", property = "contractNo", jdbcType = JdbcType.VARCHAR),
			@Result(column = "MERCHANT_PRINCIPAL", property = "merchantPrincipal", jdbcType = JdbcType.VARCHAR),
			@Result(column = "PRINCIPAL_TEL", property = "principalTel", jdbcType = JdbcType.VARCHAR) })
	BMerchantInfo selectByPrimaryKey(BMerchantInfoKey key);
	
	
	@Select({
		"select MERCHANTID, MERCHANTNAME from B_MERCHANT_INFO" })
	@Results({
			@Result(column = "MERCHANTID", property = "merchantid", jdbcType = JdbcType.VARCHAR, id = true),
			@Result(column = "MERCHANTNAME", property = "merchantname", jdbcType = JdbcType.VARCHAR),
			 })
	List<BMerchantInfo> selectAll();

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	@UpdateProvider(type = BMerchantInfoSqlProvider.class, method = "updateByExampleSelective")
	int updateByExampleSelective(@Param("record") BMerchantInfo record,
			@Param("example") BMerchantInfoExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	@UpdateProvider(type = BMerchantInfoSqlProvider.class, method = "updateByExample")
	int updateByExample(@Param("record") BMerchantInfo record,
			@Param("example") BMerchantInfoExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	@UpdateProvider(type = BMerchantInfoSqlProvider.class, method = "updateByPrimaryKeySelective")
	int updateByPrimaryKeySelective(BMerchantInfo record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	@Update({ "update B_MERCHANT_INFO",
			"set MERCHANTNAME = #{merchantname,jdbcType=VARCHAR},",
			"MERCHANTDESC = #{merchantdesc,jdbcType=VARCHAR},",
			"ISENCRYPT = #{isencrypt,jdbcType=VARCHAR},",
			"ENCRYPT_ALGORITHM = #{encryptAlgorithm,jdbcType=VARCHAR},",
			"ISSIGNATURE = #{issignature,jdbcType=VARCHAR},",
			"SIGNATURE_ALGORITHM = #{signatureAlgorithm,jdbcType=VARCHAR},",
			"PUBLIC_KEY_FILE = #{publicKeyFile,jdbcType=VARCHAR},",
			"KEY_FILE_TYPE = #{keyFileType,jdbcType=VARCHAR},",
			"ENCRYPT_TYPE = #{encryptType,jdbcType=VARCHAR},",
			"SIGNATURE_TYPE = #{signatureType,jdbcType=VARCHAR},",
			"KEY_STORE_FILE = #{keyStoreFile,jdbcType=VARCHAR},",
			"KEY_STORE_ALIAS = #{keyStoreAlias,jdbcType=VARCHAR},",
			"KEY_STORE_PASSWORD = #{keyStorePassword,jdbcType=VARCHAR},",
			"COUNTRY_CODE = #{countryCode,jdbcType=CHAR},",
			"CURRENCY_TYPE = #{currencyType,jdbcType=CHAR},",
			"MERPLATACCTALIAS = #{merplatacctalias,jdbcType=CHAR},",
			"PROTOCOLNO = #{protocolno,jdbcType=CHAR},",
			"VALID = #{valid,jdbcType=CHAR},",
			"POUNDAGEFLAG = #{poundageflag,jdbcType=CHAR},",
			"POUNDAGERATE = #{poundagerate,jdbcType=DECIMAL},",
			"CONTRACT_NO = #{contractNo,jdbcType=VARCHAR},",
			"MERCHANT_PRINCIPAL = #{merchantPrincipal,jdbcType=VARCHAR},",
			"PRINCIPAL_TEL = #{principalTel,jdbcType=VARCHAR}",
			"where MERCHANTID = #{merchantid,jdbcType=VARCHAR}" })
	int updateByPrimaryKey(BMerchantInfo record);
}