package cn.msec.cbpay.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.util.List;
import java.util.Map;

import cn.msec.cbpay.entity.BMerchantInfo;
import cn.msec.cbpay.entity.BMerchantInfoExample;
import cn.msec.cbpay.entity.BMerchantInfoExample.Criteria;
import cn.msec.cbpay.entity.BMerchantInfoExample.Criterion;

public class BMerchantInfoSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	public String countByExample(BMerchantInfoExample example) {
		BEGIN();
		SELECT("count(*)");
		FROM("B_MERCHANT_INFO");
		applyWhere(example, false);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	public String deleteByExample(BMerchantInfoExample example) {
		BEGIN();
		DELETE_FROM("B_MERCHANT_INFO");
		applyWhere(example, false);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	public String insertSelective(BMerchantInfo record) {
		BEGIN();
		INSERT_INTO("B_MERCHANT_INFO");

		if (record.getMerchantid() != null) {
			VALUES("MERCHANTID", "#{merchantid,jdbcType=VARCHAR}");
		}
		if (record.getMerchantname() != null) {
			VALUES("MERCHANTNAME", "#{merchantname,jdbcType=VARCHAR}");
		}

		if (record.getMerchantdesc() != null) {
			VALUES("MERCHANTDESC", "#{merchantdesc,jdbcType=VARCHAR}");
		}

		if (record.getIsencrypt() != null) {
			VALUES("ISENCRYPT", "#{isencrypt,jdbcType=VARCHAR}");
		}

		if (record.getEncryptAlgorithm() != null) {
			VALUES("ENCRYPT_ALGORITHM", "#{encryptAlgorithm,jdbcType=VARCHAR}");
		}

		if (record.getIssignature() != null) {
			VALUES("ISSIGNATURE", "#{issignature,jdbcType=VARCHAR}");
		}

		if (record.getSignatureAlgorithm() != null) {
			VALUES("SIGNATURE_ALGORITHM",
					"#{signatureAlgorithm,jdbcType=VARCHAR}");
		}

		if (record.getPublicKeyFile() != null) {
			VALUES("PUBLIC_KEY_FILE", "#{publicKeyFile,jdbcType=VARCHAR}");
		}

		if (record.getKeyFileType() != null) {
			VALUES("KEY_FILE_TYPE", "#{keyFileType,jdbcType=VARCHAR}");
		}

		if (record.getEncryptType() != null) {
			VALUES("ENCRYPT_TYPE", "#{encryptType,jdbcType=VARCHAR}");
		}

		if (record.getSignatureType() != null) {
			VALUES("SIGNATURE_TYPE", "#{signatureType,jdbcType=VARCHAR}");
		}

		if (record.getKeyStoreFile() != null) {
			VALUES("KEY_STORE_FILE", "#{keyStoreFile,jdbcType=VARCHAR}");
		}

		if (record.getKeyStoreAlias() != null) {
			VALUES("KEY_STORE_ALIAS", "#{keyStoreAlias,jdbcType=VARCHAR}");
		}

		if (record.getKeyStorePassword() != null) {
			VALUES("KEY_STORE_PASSWORD", "#{keyStorePassword,jdbcType=VARCHAR}");
		}

		if (record.getCountryCode() != null) {
			VALUES("COUNTRY_CODE", "#{countryCode,jdbcType=CHAR}");
		}

		if (record.getCurrencyType() != null) {
			VALUES("CURRENCY_TYPE", "#{currencyType,jdbcType=CHAR}");
		}

		if (record.getMerplatacctalias() != null) {
			VALUES("MERPLATACCTALIAS", "#{merplatacctalias,jdbcType=CHAR}");
		}

		if (record.getProtocolno() != null) {
			VALUES("PROTOCOLNO", "#{protocolno,jdbcType=CHAR}");
		}

		if (record.getValid() != null) {
			VALUES("VALID", "#{valid,jdbcType=CHAR}");
		}

		if (record.getPoundageflag() != null) {
			VALUES("POUNDAGEFLAG", "#{poundageflag,jdbcType=CHAR}");
		}

		if (record.getPoundagerate() != null) {
			VALUES("POUNDAGERATE", "#{poundagerate,jdbcType=DECIMAL}");
		}

		if (record.getContractNo() != null) {
			VALUES("CONTRACT_NO", "#{contractNo,jdbcType=VARCHAR}");
		}

		if (record.getMerchantPrincipal() != null) {
			VALUES("MERCHANT_PRINCIPAL",
					"#{merchantPrincipal,jdbcType=VARCHAR}");
		}

		if (record.getPrincipalTel() != null) {
			VALUES("PRINCIPAL_TEL", "#{principalTel,jdbcType=VARCHAR}");
		}

		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	public String selectByExample(BMerchantInfoExample example) {
		BEGIN();
		if (example != null && example.isDistinct()) {
			SELECT_DISTINCT("MERCHANTID");
		} else {
			SELECT("MERCHANTID");
		}
		SELECT("MERCHANTNAME");
		SELECT("MERCHANTDESC");
		SELECT("ISENCRYPT");
		SELECT("ENCRYPT_ALGORITHM");
		SELECT("ISSIGNATURE");
		SELECT("SIGNATURE_ALGORITHM");
		SELECT("PUBLIC_KEY_FILE");
		SELECT("KEY_FILE_TYPE");
		SELECT("ENCRYPT_TYPE");
		SELECT("SIGNATURE_TYPE");
		SELECT("KEY_STORE_FILE");
		SELECT("KEY_STORE_ALIAS");
		SELECT("KEY_STORE_PASSWORD");
		SELECT("COUNTRY_CODE");
		SELECT("CURRENCY_TYPE");
		SELECT("MERPLATACCTALIAS");
		SELECT("PROTOCOLNO");
		SELECT("VALID");
		SELECT("POUNDAGEFLAG");
		SELECT("POUNDAGERATE");
		SELECT("CONTRACT_NO");
		SELECT("MERCHANT_PRINCIPAL");
		SELECT("PRINCIPAL_TEL");
		FROM("B_MERCHANT_INFO");
		applyWhere(example, false);

		if (example != null && example.getOrderByClause() != null) {
			ORDER_BY(example.getOrderByClause());
		}

		if (example != null) {
			return SQL().concat(
					" limit " + example.getOffset() + "," + example.getLimit());
		}
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		BMerchantInfo record = (BMerchantInfo) parameter.get("record");
		BMerchantInfoExample example = (BMerchantInfoExample) parameter
				.get("example");

		BEGIN();
		UPDATE("B_MERCHANT_INFO");

		if (record.getMerchantid() != null) {
			SET("MERCHANTID = #{record.merchantid,jdbcType=VARCHAR}");
		}

		if (record.getMerchantname() != null) {
			SET("MERCHANTNAME = #{record.merchantname,jdbcType=VARCHAR}");
		}

		if (record.getMerchantdesc() != null) {
			SET("MERCHANTDESC = #{record.merchantdesc,jdbcType=VARCHAR}");
		}

		if (record.getIsencrypt() != null) {
			SET("ISENCRYPT = #{record.isencrypt,jdbcType=VARCHAR}");
		}

		if (record.getEncryptAlgorithm() != null) {
			SET("ENCRYPT_ALGORITHM = #{record.encryptAlgorithm,jdbcType=VARCHAR}");
		}

		if (record.getIssignature() != null) {
			SET("ISSIGNATURE = #{record.issignature,jdbcType=VARCHAR}");
		}

		if (record.getSignatureAlgorithm() != null) {
			SET("SIGNATURE_ALGORITHM = #{record.signatureAlgorithm,jdbcType=VARCHAR}");
		}

		if (record.getPublicKeyFile() != null) {
			SET("PUBLIC_KEY_FILE = #{record.publicKeyFile,jdbcType=VARCHAR}");
		}

		if (record.getKeyFileType() != null) {
			SET("KEY_FILE_TYPE = #{record.keyFileType,jdbcType=VARCHAR}");
		}

		if (record.getEncryptType() != null) {
			SET("ENCRYPT_TYPE = #{record.encryptType,jdbcType=VARCHAR}");
		}

		if (record.getSignatureType() != null) {
			SET("SIGNATURE_TYPE = #{record.signatureType,jdbcType=VARCHAR}");
		}

		if (record.getKeyStoreFile() != null) {
			SET("KEY_STORE_FILE = #{record.keyStoreFile,jdbcType=VARCHAR}");
		}

		if (record.getKeyStoreAlias() != null) {
			SET("KEY_STORE_ALIAS = #{record.keyStoreAlias,jdbcType=VARCHAR}");
		}

		if (record.getKeyStorePassword() != null) {
			SET("KEY_STORE_PASSWORD = #{record.keyStorePassword,jdbcType=VARCHAR}");
		}

		if (record.getCountryCode() != null) {
			SET("COUNTRY_CODE = #{record.countryCode,jdbcType=CHAR}");
		}

		if (record.getCurrencyType() != null) {
			SET("CURRENCY_TYPE = #{record.currencyType,jdbcType=CHAR}");
		}

		if (record.getMerplatacctalias() != null) {
			SET("MERPLATACCTALIAS = #{record.merplatacctalias,jdbcType=CHAR}");
		}

		if (record.getProtocolno() != null) {
			SET("PROTOCOLNO = #{record.protocolno,jdbcType=CHAR}");
		}

		if (record.getValid() != null) {
			SET("VALID = #{record.valid,jdbcType=CHAR}");
		}

		if (record.getPoundageflag() != null) {
			SET("POUNDAGEFLAG = #{record.poundageflag,jdbcType=CHAR}");
		}

		if (record.getPoundagerate() != null) {
			SET("POUNDAGERATE = #{record.poundagerate,jdbcType=DECIMAL}");
		}

		if (record.getContractNo() != null) {
			SET("CONTRACT_NO = #{record.contractNo,jdbcType=VARCHAR}");
		}

		if (record.getMerchantPrincipal() != null) {
			SET("MERCHANT_PRINCIPAL = #{record.merchantPrincipal,jdbcType=VARCHAR}");
		}

		if (record.getPrincipalTel() != null) {
			SET("PRINCIPAL_TEL = #{record.principalTel,jdbcType=VARCHAR}");
		}

		applyWhere(example, true);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	public String updateByExample(Map<String, Object> parameter) {
		BEGIN();
		UPDATE("B_MERCHANT_INFO");

		SET("MERCHANTID = #{record.merchantid,jdbcType=VARCHAR}");
		SET("MERCHANTNAME = #{record.merchantname,jdbcType=VARCHAR}");
		SET("MERCHANTDESC = #{record.merchantdesc,jdbcType=VARCHAR}");
		SET("ISENCRYPT = #{record.isencrypt,jdbcType=VARCHAR}");
		SET("ENCRYPT_ALGORITHM = #{record.encryptAlgorithm,jdbcType=VARCHAR}");
		SET("ISSIGNATURE = #{record.issignature,jdbcType=VARCHAR}");
		SET("SIGNATURE_ALGORITHM = #{record.signatureAlgorithm,jdbcType=VARCHAR}");
		SET("PUBLIC_KEY_FILE = #{record.publicKeyFile,jdbcType=VARCHAR}");
		SET("KEY_FILE_TYPE = #{record.keyFileType,jdbcType=VARCHAR}");
		SET("ENCRYPT_TYPE = #{record.encryptType,jdbcType=VARCHAR}");
		SET("SIGNATURE_TYPE = #{record.signatureType,jdbcType=VARCHAR}");
		SET("KEY_STORE_FILE = #{record.keyStoreFile,jdbcType=VARCHAR}");
		SET("KEY_STORE_ALIAS = #{record.keyStoreAlias,jdbcType=VARCHAR}");
		SET("KEY_STORE_PASSWORD = #{record.keyStorePassword,jdbcType=VARCHAR}");
		SET("COUNTRY_CODE = #{record.countryCode,jdbcType=CHAR}");
		SET("CURRENCY_TYPE = #{record.currencyType,jdbcType=CHAR}");
		SET("MERPLATACCTALIAS = #{record.merplatacctalias,jdbcType=CHAR}");
		SET("PROTOCOLNO = #{record.protocolno,jdbcType=CHAR}");
		SET("VALID = #{record.valid,jdbcType=CHAR}");
		SET("POUNDAGEFLAG = #{record.poundageflag,jdbcType=CHAR}");
		SET("POUNDAGERATE = #{record.poundagerate,jdbcType=DECIMAL}");
		SET("CONTRACT_NO = #{record.contractNo,jdbcType=VARCHAR}");
		SET("MERCHANT_PRINCIPAL = #{record.merchantPrincipal,jdbcType=VARCHAR}");
		SET("PRINCIPAL_TEL = #{record.principalTel,jdbcType=VARCHAR}");

		BMerchantInfoExample example = (BMerchantInfoExample) parameter
				.get("example");
		applyWhere(example, true);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	public String updateByPrimaryKeySelective(BMerchantInfo record) {
		BEGIN();
		UPDATE("B_MERCHANT_INFO");

		if (record.getMerchantname() != null) {
			SET("MERCHANTNAME = #{merchantname,jdbcType=VARCHAR}");
		}

		if (record.getMerchantdesc() != null) {
			SET("MERCHANTDESC = #{merchantdesc,jdbcType=VARCHAR}");
		}

		if (record.getIsencrypt() != null) {
			SET("ISENCRYPT = #{isencrypt,jdbcType=VARCHAR}");
		}

		if (record.getEncryptAlgorithm() != null) {
			SET("ENCRYPT_ALGORITHM = #{encryptAlgorithm,jdbcType=VARCHAR}");
		}

		if (record.getIssignature() != null) {
			SET("ISSIGNATURE = #{issignature,jdbcType=VARCHAR}");
		}

		if (record.getSignatureAlgorithm() != null) {
			SET("SIGNATURE_ALGORITHM = #{signatureAlgorithm,jdbcType=VARCHAR}");
		}

		if (record.getPublicKeyFile() != null) {
			SET("PUBLIC_KEY_FILE = #{publicKeyFile,jdbcType=VARCHAR}");
		}

		if (record.getKeyFileType() != null) {
			SET("KEY_FILE_TYPE = #{keyFileType,jdbcType=VARCHAR}");
		}

		if (record.getEncryptType() != null) {
			SET("ENCRYPT_TYPE = #{encryptType,jdbcType=VARCHAR}");
		}

		if (record.getSignatureType() != null) {
			SET("SIGNATURE_TYPE = #{signatureType,jdbcType=VARCHAR}");
		}

		if (record.getKeyStoreFile() != null) {
			SET("KEY_STORE_FILE = #{keyStoreFile,jdbcType=VARCHAR}");
		}

		if (record.getKeyStoreAlias() != null) {
			SET("KEY_STORE_ALIAS = #{keyStoreAlias,jdbcType=VARCHAR}");
		}

		if (record.getKeyStorePassword() != null) {
			SET("KEY_STORE_PASSWORD = #{keyStorePassword,jdbcType=VARCHAR}");
		}

		if (record.getCountryCode() != null) {
			SET("COUNTRY_CODE = #{countryCode,jdbcType=CHAR}");
		}

		if (record.getCurrencyType() != null) {
			SET("CURRENCY_TYPE = #{currencyType,jdbcType=CHAR}");
		}

		if (record.getMerplatacctalias() != null) {
			SET("MERPLATACCTALIAS = #{merplatacctalias,jdbcType=CHAR}");
		}

		if (record.getProtocolno() != null) {
			SET("PROTOCOLNO = #{protocolno,jdbcType=CHAR}");
		}

		if (record.getValid() != null) {
			SET("VALID = #{valid,jdbcType=CHAR}");
		}

		if (record.getPoundageflag() != null) {
			SET("POUNDAGEFLAG = #{poundageflag,jdbcType=CHAR}");
		}

		if (record.getPoundagerate() != null) {
			SET("POUNDAGERATE = #{poundagerate,jdbcType=DECIMAL}");
		}

		if (record.getContractNo() != null) {
			SET("CONTRACT_NO = #{contractNo,jdbcType=VARCHAR}");
		}

		if (record.getMerchantPrincipal() != null) {
			SET("MERCHANT_PRINCIPAL = #{merchantPrincipal,jdbcType=VARCHAR}");
		}

		if (record.getPrincipalTel() != null) {
			SET("PRINCIPAL_TEL = #{principalTel,jdbcType=VARCHAR}");
		}

		WHERE("MERCHANTID = #{merchantid,jdbcType=VARCHAR}");

		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table B_MERCHANT_INFO
	 *
	 * @mbggenerated Mon Mar 28 15:17:49 CST 2016
	 */
	protected void applyWhere(BMerchantInfoExample example,
			boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}

		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}

		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}

				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}

					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1,
									criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th,
									criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2,
									criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th,
									criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j,
										k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}

		if (sb.length() > 0) {
			WHERE(sb.toString());
		}
	}
}