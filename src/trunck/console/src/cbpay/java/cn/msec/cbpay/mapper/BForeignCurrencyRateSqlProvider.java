package cn.msec.cbpay.mapper;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import java.util.List;
import java.util.Map;

import cn.msec.cbpay.entity.BForeignCurrencyRate;
import cn.msec.cbpay.entity.BForeignCurrencyRateExample;
import cn.msec.cbpay.entity.BForeignCurrencyRateExample.Criteria;
import cn.msec.cbpay.entity.BForeignCurrencyRateExample.Criterion;

public class BForeignCurrencyRateSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table B_FOREIGN_CURRENCY_RATE
     *
     * @mbggenerated Tue Mar 22 09:19:58 CST 2016
     */
    public String countByExample(BForeignCurrencyRateExample example) {
        BEGIN();
        SELECT("count(*)");
        FROM("B_FOREIGN_CURRENCY_RATE");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table B_FOREIGN_CURRENCY_RATE
     *
     * @mbggenerated Tue Mar 22 09:19:58 CST 2016
     */
    public String deleteByExample(BForeignCurrencyRateExample example) {
        BEGIN();
        DELETE_FROM("B_FOREIGN_CURRENCY_RATE");
        applyWhere(example, false);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table B_FOREIGN_CURRENCY_RATE
     *
     * @mbggenerated Tue Mar 22 09:19:58 CST 2016
     */
    public String insertSelective(BForeignCurrencyRate record) {
        BEGIN();
        INSERT_INTO("B_FOREIGN_CURRENCY_RATE");
        
        if (record.getFromId() != null) {
            VALUES("FROM_ID", "#{fromId,jdbcType=VARCHAR}");
        }
        
        if (record.getRecvDate() != null) {
            VALUES("RECV_DATE", "#{recvDate,jdbcType=VARCHAR}");
        }
        
        if (record.getRecvTime() != null) {
            VALUES("RECV_TIME", "#{recvTime,jdbcType=VARCHAR}");
        }
        
        if (record.getCurrencyCode() != null) {
            VALUES("CURRENCY_CODE", "#{currencyCode,jdbcType=VARCHAR}");
        }
        
        if (record.getTranstime() != null) {
            VALUES("TRANSTIME", "#{transtime,jdbcType=VARCHAR}");
        }
        
        if (record.getTransdate() != null) {
            VALUES("TRANSDATE", "#{transdate,jdbcType=VARCHAR}");
        }
        
        if (record.getCashbuyprice() != null) {
            VALUES("CASHBUYPRICE", "#{cashbuyprice,jdbcType=DECIMAL}");
        }
        
        if (record.getExbuyprice() != null) {
            VALUES("EXBUYPRICE", "#{exbuyprice,jdbcType=DECIMAL}");
        }
        
        if (record.getCashsellprice() != null) {
            VALUES("CASHSELLPRICE", "#{cashsellprice,jdbcType=DECIMAL}");
        }
        
        if (record.getExsellprice() != null) {
            VALUES("EXSELLPRICE", "#{exsellprice,jdbcType=DECIMAL}");
        }
        
        if (record.getExquotedate() != null) {
            VALUES("EXQUOTEDATE", "#{exquotedate,jdbcType=VARCHAR}");
        }
        
        if (record.getExquotetime() != null) {
            VALUES("EXQUOTETIME", "#{exquotetime,jdbcType=VARCHAR}");
        }
        
        if (record.getE3rdpayno() != null) {
            VALUES("E3RDPAYNO", "#{e3rdpayno,jdbcType=VARCHAR}");
        }
        
        if (record.getPrice() != null) {
            VALUES("PRICE", "#{price,jdbcType=DECIMAL}");
        }
        
        if (record.getDirectionFlag() != null) {
            VALUES("DIRECTION_FLAG", "#{directionFlag,jdbcType=CHAR}");
        }
        
        if (record.getTranAmt() != null) {
            VALUES("TRAN_AMT", "#{tranAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getClientExchangeRate() != null) {
            VALUES("CLIENT_EXCHANGE_RATE", "#{clientExchangeRate,jdbcType=DECIMAL}");
        }
        
        if (record.getDiscountType() != null) {
            VALUES("DISCOUNT_TYPE", "#{discountType,jdbcType=CHAR}");
        }
        
        if (record.getDisAmt() != null) {
            VALUES("DIS_AMT", "#{disAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getAmt() != null) {
            VALUES("AMT", "#{amt,jdbcType=DECIMAL}");
        }
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table B_FOREIGN_CURRENCY_RATE
     *
     * @mbggenerated Tue Mar 22 09:19:58 CST 2016
     */
    public String selectByExample(BForeignCurrencyRateExample example) {
        BEGIN();
        if (example != null && example.isDistinct()) {
            SELECT_DISTINCT("FROM_ID");
        } else {
            SELECT("FROM_ID");
        }
        SELECT("RECV_DATE");
        SELECT("RECV_TIME");
        SELECT("CURRENCY_CODE");
        SELECT("TRANSTIME");
        SELECT("TRANSDATE");
        SELECT("CASHBUYPRICE");
        SELECT("EXBUYPRICE");
        SELECT("CASHSELLPRICE");
        SELECT("EXSELLPRICE");
        SELECT("EXQUOTEDATE");
        SELECT("EXQUOTETIME");
        SELECT("E3RDPAYNO");
        SELECT("PRICE");
        SELECT("DIRECTION_FLAG");
        SELECT("TRAN_AMT");
        SELECT("CLIENT_EXCHANGE_RATE");
        SELECT("DISCOUNT_TYPE");
        SELECT("DIS_AMT");
        SELECT("AMT");
        FROM("B_FOREIGN_CURRENCY_RATE");
        applyWhere(example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            ORDER_BY(example.getOrderByClause());
        }
        
        if(example != null){
            return SQL().concat(" limit "+example.getOffset()+","+example.getLimit());
        }
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table B_FOREIGN_CURRENCY_RATE
     *
     * @mbggenerated Tue Mar 22 09:19:58 CST 2016
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        BForeignCurrencyRate record = (BForeignCurrencyRate) parameter.get("record");
        BForeignCurrencyRateExample example = (BForeignCurrencyRateExample) parameter.get("example");
        
        BEGIN();
        UPDATE("B_FOREIGN_CURRENCY_RATE");
        
        if (record.getFromId() != null) {
            SET("FROM_ID = #{record.fromId,jdbcType=VARCHAR}");
        }
        
        if (record.getRecvDate() != null) {
            SET("RECV_DATE = #{record.recvDate,jdbcType=VARCHAR}");
        }
        
        if (record.getRecvTime() != null) {
            SET("RECV_TIME = #{record.recvTime,jdbcType=VARCHAR}");
        }
        
        if (record.getCurrencyCode() != null) {
            SET("CURRENCY_CODE = #{record.currencyCode,jdbcType=VARCHAR}");
        }
        
        if (record.getTranstime() != null) {
            SET("TRANSTIME = #{record.transtime,jdbcType=VARCHAR}");
        }
        
        if (record.getTransdate() != null) {
            SET("TRANSDATE = #{record.transdate,jdbcType=VARCHAR}");
        }
        
        if (record.getCashbuyprice() != null) {
            SET("CASHBUYPRICE = #{record.cashbuyprice,jdbcType=DECIMAL}");
        }
        
        if (record.getExbuyprice() != null) {
            SET("EXBUYPRICE = #{record.exbuyprice,jdbcType=DECIMAL}");
        }
        
        if (record.getCashsellprice() != null) {
            SET("CASHSELLPRICE = #{record.cashsellprice,jdbcType=DECIMAL}");
        }
        
        if (record.getExsellprice() != null) {
            SET("EXSELLPRICE = #{record.exsellprice,jdbcType=DECIMAL}");
        }
        
        if (record.getExquotedate() != null) {
            SET("EXQUOTEDATE = #{record.exquotedate,jdbcType=VARCHAR}");
        }
        
        if (record.getExquotetime() != null) {
            SET("EXQUOTETIME = #{record.exquotetime,jdbcType=VARCHAR}");
        }
        
        if (record.getE3rdpayno() != null) {
            SET("E3RDPAYNO = #{record.e3rdpayno,jdbcType=VARCHAR}");
        }
        
        if (record.getPrice() != null) {
            SET("PRICE = #{record.price,jdbcType=DECIMAL}");
        }
        
        if (record.getDirectionFlag() != null) {
            SET("DIRECTION_FLAG = #{record.directionFlag,jdbcType=CHAR}");
        }
        
        if (record.getTranAmt() != null) {
            SET("TRAN_AMT = #{record.tranAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getClientExchangeRate() != null) {
            SET("CLIENT_EXCHANGE_RATE = #{record.clientExchangeRate,jdbcType=DECIMAL}");
        }
        
        if (record.getDiscountType() != null) {
            SET("DISCOUNT_TYPE = #{record.discountType,jdbcType=CHAR}");
        }
        
        if (record.getDisAmt() != null) {
            SET("DIS_AMT = #{record.disAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getAmt() != null) {
            SET("AMT = #{record.amt,jdbcType=DECIMAL}");
        }
        
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table B_FOREIGN_CURRENCY_RATE
     *
     * @mbggenerated Tue Mar 22 09:19:58 CST 2016
     */
    public String updateByExample(Map<String, Object> parameter) {
        BEGIN();
        UPDATE("B_FOREIGN_CURRENCY_RATE");
        
        SET("FROM_ID = #{record.fromId,jdbcType=VARCHAR}");
        SET("RECV_DATE = #{record.recvDate,jdbcType=VARCHAR}");
        SET("RECV_TIME = #{record.recvTime,jdbcType=VARCHAR}");
        SET("CURRENCY_CODE = #{record.currencyCode,jdbcType=VARCHAR}");
        SET("TRANSTIME = #{record.transtime,jdbcType=VARCHAR}");
        SET("TRANSDATE = #{record.transdate,jdbcType=VARCHAR}");
        SET("CASHBUYPRICE = #{record.cashbuyprice,jdbcType=DECIMAL}");
        SET("EXBUYPRICE = #{record.exbuyprice,jdbcType=DECIMAL}");
        SET("CASHSELLPRICE = #{record.cashsellprice,jdbcType=DECIMAL}");
        SET("EXSELLPRICE = #{record.exsellprice,jdbcType=DECIMAL}");
        SET("EXQUOTEDATE = #{record.exquotedate,jdbcType=VARCHAR}");
        SET("EXQUOTETIME = #{record.exquotetime,jdbcType=VARCHAR}");
        SET("E3RDPAYNO = #{record.e3rdpayno,jdbcType=VARCHAR}");
        SET("PRICE = #{record.price,jdbcType=DECIMAL}");
        SET("DIRECTION_FLAG = #{record.directionFlag,jdbcType=CHAR}");
        SET("TRAN_AMT = #{record.tranAmt,jdbcType=DECIMAL}");
        SET("CLIENT_EXCHANGE_RATE = #{record.clientExchangeRate,jdbcType=DECIMAL}");
        SET("DISCOUNT_TYPE = #{record.discountType,jdbcType=CHAR}");
        SET("DIS_AMT = #{record.disAmt,jdbcType=DECIMAL}");
        SET("AMT = #{record.amt,jdbcType=DECIMAL}");
        
        BForeignCurrencyRateExample example = (BForeignCurrencyRateExample) parameter.get("example");
        applyWhere(example, true);
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table B_FOREIGN_CURRENCY_RATE
     *
     * @mbggenerated Tue Mar 22 09:19:58 CST 2016
     */
    public String updateByPrimaryKeySelective(BForeignCurrencyRate record) {
        BEGIN();
        UPDATE("B_FOREIGN_CURRENCY_RATE");
        
        if (record.getTranstime() != null) {
            SET("TRANSTIME = #{transtime,jdbcType=VARCHAR}");
        }
        
        if (record.getTransdate() != null) {
            SET("TRANSDATE = #{transdate,jdbcType=VARCHAR}");
        }
        
        if (record.getCashbuyprice() != null) {
            SET("CASHBUYPRICE = #{cashbuyprice,jdbcType=DECIMAL}");
        }
        
        if (record.getExbuyprice() != null) {
            SET("EXBUYPRICE = #{exbuyprice,jdbcType=DECIMAL}");
        }
        
        if (record.getCashsellprice() != null) {
            SET("CASHSELLPRICE = #{cashsellprice,jdbcType=DECIMAL}");
        }
        
        if (record.getExsellprice() != null) {
            SET("EXSELLPRICE = #{exsellprice,jdbcType=DECIMAL}");
        }
        
        if (record.getExquotedate() != null) {
            SET("EXQUOTEDATE = #{exquotedate,jdbcType=VARCHAR}");
        }
        
        if (record.getExquotetime() != null) {
            SET("EXQUOTETIME = #{exquotetime,jdbcType=VARCHAR}");
        }
        
        if (record.getE3rdpayno() != null) {
            SET("E3RDPAYNO = #{e3rdpayno,jdbcType=VARCHAR}");
        }
        
        if (record.getPrice() != null) {
            SET("PRICE = #{price,jdbcType=DECIMAL}");
        }
        
        if (record.getDirectionFlag() != null) {
            SET("DIRECTION_FLAG = #{directionFlag,jdbcType=CHAR}");
        }
        
        if (record.getTranAmt() != null) {
            SET("TRAN_AMT = #{tranAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getClientExchangeRate() != null) {
            SET("CLIENT_EXCHANGE_RATE = #{clientExchangeRate,jdbcType=DECIMAL}");
        }
        
        if (record.getDiscountType() != null) {
            SET("DISCOUNT_TYPE = #{discountType,jdbcType=CHAR}");
        }
        
        if (record.getDisAmt() != null) {
            SET("DIS_AMT = #{disAmt,jdbcType=DECIMAL}");
        }
        
        if (record.getAmt() != null) {
            SET("AMT = #{amt,jdbcType=DECIMAL}");
        }
        
        WHERE("FROM_ID = #{fromId,jdbcType=VARCHAR}");
        WHERE("RECV_DATE = #{recvDate,jdbcType=VARCHAR}");
        WHERE("RECV_TIME = #{recvTime,jdbcType=VARCHAR}");
        WHERE("CURRENCY_CODE = #{currencyCode,jdbcType=VARCHAR}");
        
        return SQL();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table B_FOREIGN_CURRENCY_RATE
     *
     * @mbggenerated Tue Mar 22 09:19:58 CST 2016
     */
    protected void applyWhere(BForeignCurrencyRateExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            WHERE(sb.toString());
        }
    }
}