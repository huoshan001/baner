<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0050)http://shmilyaw-hotmail-com.iteye.com/blog/1897635 -->
<HTML dir=ltr xml:lang="zh-CN" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>activemq的几种基本通信方式总结 - 点缀星辰 - ITeye技术网站</TITLE>
<META content="text/html; charset=UTF-8" http-equiv=Content-Type>
<META name=description 
content="  简介  &nbsp; &nbsp; &nbsp;在前面一篇文章里讨论过几种应用系统集成的方式，发现实际上面向消息队列的集成方案算是一个总体比较合理的选择。这里，我们先针对 ...">
<META name=keywords content="activemq activemq的几种基本通信方式总结"><LINK 
rel="shortcut icon" type=image/x-icon href="/images/favicon.ico"><LINK 
title=ITeye rel=search type=application/opensearchdescription+xml 
href="/open_search.xml"><LINK title=点缀星辰 rel=alternate type=application/rss+xml 
href="/rss"><LINK rel=stylesheet type=text/css 
href="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/blog.css" 
media=screen><LINK rel=stylesheet type=text/css 
href="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/blue.css" 
media=screen>
<SCRIPT type=text/javascript 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/application.js"></SCRIPT>

<SCRIPT type=text/javascript>

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-535605-1']);
  _gaq.push(['_setDomainName', 'iteye.com']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</SCRIPT>
<LINK rel=stylesheet type=text/css 
href="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/SyntaxHighlighter.css" 
media=screen>
<SCRIPT type=text/javascript 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/shCoreCommon.js"></SCRIPT>

<SCRIPT type=text/javascript 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/hotkey.js"></SCRIPT>

<SCRIPT type=text/javascript 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/code_favorites.js"></SCRIPT>

<SCRIPT type=text/javascript 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/weiboshare.js"></SCRIPT>

<META name=GENERATOR content="MSHTML 8.00.7601.17622"></HEAD>
<BODY>
<DIV id=header>
<DIV id=blog_site_nav><A class=homepage href="http://www.iteye.com/">首页</A> <A 
href="http://www.iteye.com/news">资讯</A> <A 
href="http://www.iteye.com/magazines">精华</A> <A 
href="http://www.iteye.com/forums">论坛</A> <A 
href="http://www.iteye.com/ask">问答</A> <A 
href="http://www.iteye.com/blogs">博客</A> <A 
href="http://www.iteye.com/blogs/subjects">专栏</A> <A 
href="http://www.iteye.com/groups">群组</A> <A id=msna onclick="return false;" 
href="http://shmilyaw-hotmail-com.iteye.com/blog/1897635#"><U>更多</U> 
<SMALL>▼</SMALL></A> 
<DIV style="DISPLAY: none" class=quick_menu><A href="http://job.iteye.com/iteye" 
target=_blank>招聘</A> <A href="http://www.iteye.com/search">搜索</A> </DIV></DIV>
<DIV id=user_nav><A class=welcome title=登录 
href="http://shmilyaw-hotmail-com.iteye.com/login">您还未登录 !</A> <A 
href="http://shmilyaw-hotmail-com.iteye.com/login">登录</A> <A class=nobg 
href="http://shmilyaw-hotmail-com.iteye.com/signup">注册</A> </DIV></DIV>
<DIV id=page>
<DIV id=branding class=clearfix>
<DIV id=blog_name>
<H1><A href="http://shmilyaw-hotmail-com.iteye.com/">点缀星辰</A></H1></DIV>
<DIV id=fd></DIV>
<DIV id=blog_navbar>
<UL>
  <LI class=blog_navbar_for><A 
  href="http://shmilyaw-hotmail-com.iteye.com/"><STRONG>博客</STRONG></A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/weibo">微博</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/album">相册</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/link">收藏</A></LI>
  <LI><A 
href="http://shmilyaw-hotmail-com.iteye.com/blog/guest_book">留言</A></LI>
  <LI><A 
href="http://shmilyaw-hotmail-com.iteye.com/blog/profile">关于我</A></LI></UL>
<DIV class=search>
<FORM method=get action=/blog/search><INPUT 
style="WIDTH: 110px; MARGIN-LEFT: 10px" id=query class=search_text type=text 
name=query> <INPUT class=submit_search type=submit> </FORM></DIV>
<DIV id=fd></DIV></DIV></DIV>
<DIV id=content class=clearfix>
<DIV id=main>
<DIV style="DISPLAY: none" class=h-entry><A class=p-author 
href="http://shmilyaw-hotmail-com.iteye.com/" target=_blank>frank-liu</A> </DIV>
<DIV class=blog_main>
<DIV class=blog_title>
<H3><A 
href="http://shmilyaw-hotmail-com.iteye.com/blog/1897635">activemq的几种基本通信方式总结</A> 
<EM class=actions></EM></H3>
<UL class=blog_categories><STRONG>博客分类：</STRONG> 
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/category/205237">java</A></LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/category/284149">activemq</A></LI></UL>
<DIV class=news_tag><A 
href="http://www.iteye.com/blogs/tag/activemq">activemq</A>&nbsp;</DIV></DIV>
<DIV id=blog_content class=blog_content>
<DIV style="FONT-SIZE: 14px" class=iteye-blog-content-contain>
<H1>简介</H1>
<P>&nbsp; &nbsp; 
&nbsp;在前面一篇文章里讨论过几种应用系统集成的方式，发现实际上面向消息队列的集成方案算是一个总体比较合理的选择。这里，我们先针对具体的一个消息队列Activemq的基本通信方式进行探讨。activemq是JMS消息通信规范的一个实现。总的来说，消息规范里面定义最常见的几种消息通信模式主要有发布-订阅、点对点这两种。另外，通过结合这些模式的具体应用，我们在处理某些应用场景的时候也衍生出来了一种请求应答的模式。下面，我们针对这几种方式一一讨论一下。</P>
<P>&nbsp;</P>
<H1>基础流程</H1>
<P>&nbsp; &nbsp; 在讨论具体方式的时候，我们先看看使用activemq需要启动服务的主要过程。</P>
<P>&nbsp; &nbsp; 按照JMS的规范，我们首先需要获得一个JMS connection factory.，通过这个connection 
factory来创建connection.在这个基础之上我们再创建session, destination, 
producer和consumer。因此主要的几个步骤如下：</P>
<P>1. 获得JMS connection factory. 通过我们提供特定环境的连接信息来构造factory。</P>
<P>2. 利用factory构造JMS connection</P>
<P>3. 启动connection</P>
<P>4. 通过connection创建JMS session.</P>
<P>5. 指定JMS destination.</P>
<P>6. 创建JMS producer或者创建JMS message并提供destination.</P>
<P>7. 创建JMS consumer或注册JMS message listener.</P>
<P>8. 发送和接收JMS message.</P>
<P>9. 关闭所有JMS资源，包括connection, session, producer, consumer等。</P>
<P>&nbsp;</P>
<H1>publish-subscribe</H1>
<P>&nbsp; &nbsp; 
&nbsp;发布订阅模式有点类似于我们日常生活中订阅报纸。每年到年尾的时候，邮局就会发一本报纸集合让我们来选择订阅哪一个。在这个表里头列了所有出版发行的报纸，那么对于我们每一个订阅者来说，我们可以选择一份或者多份报纸。比如北京日报、潇湘晨报等。那么这些个我们订阅的报纸，就相当于发布订阅模式里的topic。有很多个人订阅报纸，也有人可能和我订阅了相同的报纸。那么，在这里，相当于我们在同一个topic里注册了。对于一份报纸发行方来说，它和所有的订阅者就构成了一个1对多的关系。这种关系如下图所示：</P>
<P><IMG alt="" 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/605c3d41-70af-3c3c-8f9d-0077a252964e.jpg"></P>
<P>&nbsp; &nbsp; &nbsp;现在，假定我们用前面讨论的场景来写一个简单的示例。我们首先需要定义的是publisher.</P>
<H2>publisher</H2>
<P>&nbsp; &nbsp; &nbsp;publisher是属于发布信息的一方，它通过定义一个或者多个topic，然后给这些topic发送消息。</P>
<P>&nbsp; &nbsp; publisher的构造函数如下：</P><PRE class=java name="code">public Publisher() throws JMSException {
    	factory = new ActiveMQConnectionFactory(brokerURL);
    	connection = factory.createConnection();
    	try {
        connection.start();
    	} catch (JMSException jmse) {
    		connection.close();
    		throw jmse;
    	}
        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
        producer = session.createProducer(null);
    }</PRE>
<P>&nbsp; &nbsp; &nbsp;我们按照前面说的流程定义了基本的connectionFactory, connection, session, 
producer。这里代码就是主要实现初始化的效果。</P>
<P>&nbsp; &nbsp; 接着，我们需要定义一系列的topic让所有的consumer来订阅，设置topic的代码如下：</P><PRE class=java name="code">protected void setTopics(String[] stocks) throws JMSException {
	destinations = new Destination[stocks.length];
	for(int i = 0; i &lt; stocks.length; i++) {
		destinations[i] = session.createTopic("STOCKS." + stocks[i]);
	}
}</PRE>
<P>&nbsp; &nbsp; 
&nbsp;这里destinations是一个内部定义的成员变量Destination[]。这里我们总共定义了的topic数取决于给定的参数stocks。</P>
<P>&nbsp; &nbsp; &nbsp;在定义好topic之后我们要给这些指定的topic发消息，具体实现的代码如下：</P><PRE class=java name="code">protected void sendMessage(String[] stocks) throws JMSException {
	for(int i = 0; i &lt; stocks.length; i++) {
		Message message = createStockMessage(stocks[i], session);
		System.out.println("Sending: " + ((ActiveMQMapMessage)message).getContentMap() + " on destination: " + destinations[i]);
		producer.send(destinations[i], message);
	}
}

protected Message createStockMessage(String stock, Session session) throws JMSException {
    MapMessage message = session.createMapMessage();
	message.setString("stock", stock);
	message.setDouble("price", 1.00);
	message.setDouble("offer", 0.01);
	message.setBoolean("up", true);
		
	return message;
}</PRE>
<P>&nbsp; &nbsp; 
&nbsp;前面的代码很简单，在sendMessage方法里我们遍历每个topic，然后给每个topic发送定义的Message消息。</P>
<P>&nbsp; &nbsp; 在定义好前面发送消息的基础之后，我们调用他们的代码就很简单了：</P><PRE class=java name="code">public static void main(String[] args) throws JMSException {
	if(args.length &lt; 1)
		throw new IllegalArgumentException();
	
        // Create publisher		
        Publisher publisher = new Publisher();
        
        // Set topics
	publisher.setTopics(args);
		
	for(int i = 0; i &lt; 10; i++) {
		publisher.sendMessage(args);
		System.out.println("Publisher '" + i + " price messages");
		try {
			Thread.sleep(1000);
		} catch(InterruptedException e) {
			e.printStackTrace();
		}
    }
    // Close all resources
    publisher.close();
}</PRE>
<P>&nbsp; &nbsp; 
&nbsp;调用他们的代码就是我们遍历所有topic，然后通过sendMessage发送消息。在发送一个消息之后先sleep1秒钟。要注意的一个地方就是我们使用完资源之后必须要使用close方法将这些资源关闭释放。close方法关闭资源的具体实现如下：</P><PRE class=java name="code">public void close() throws JMSException {
    if (connection != null) {
        connection.close();
     }
}</PRE>
<P>&nbsp;</P>
<H2>consumer</H2>
<P>&nbsp; &nbsp; Consumer的代码也很类似，具体的步骤无非就是1.初始化资源。 2. 接收消息。 3. 必要的时候关闭资源。</P>
<P>&nbsp; &nbsp; 初始化资源可以放到构造函数里面：</P><PRE class=java name="code">public Consumer() throws JMSException {
    	factory = new ActiveMQConnectionFactory(brokerURL);
    	connection = factory.createConnection();
        connection.start();
        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
    }</PRE>
<P>&nbsp; &nbsp; 
&nbsp;接收和处理消息的方法有两种，分为同步和异步的，一般同步的方式我们是通过MessageConsumer.receive()方法来处理接收到的消息。而异步的方法则是通过注册一个MessageListener的方法，使用MessageConsumer.setMessageListener()。这里我们采用异步的方式实现：</P><PRE class=java name="code">public static void main(String[] args) throws JMSException {
    Consumer consumer = new Consumer();
    for (String stock : args) {
	Destination destination = consumer.getSession().createTopic("STOCKS." + stock);
	MessageConsumer messageConsumer = consumer.getSession().createConsumer(destination);
	messageConsumer.setMessageListener(new Listener());
    }
}
	
public Session getSession() {
	return session;
}</PRE>
<P>&nbsp; &nbsp; 
&nbsp;在前面的代码里我们先找到同样的topic,然后遍历所有的topic去获得消息。对于消息的处理我们专门通过Listener对象来负责。</P>
<P>&nbsp; &nbsp; Listener对象的职责很简单，主要就是处理接收到的消息：</P><PRE class=java name="code">public class Listener implements MessageListener {

	public void onMessage(Message message) {
		try {
			MapMessage map = (MapMessage)message;
			String stock = map.getString("stock");
			double price = map.getDouble("price");
			double offer = map.getDouble("offer");
			boolean up = map.getBoolean("up");
			DecimalFormat df = new DecimalFormat( "#,###,###,##0.00" );
			System.out.println(stock + "\t" + df.format(price) + "\t" + df.format(offer) + "\t" + (up?"up":"down"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}</PRE>
<P>&nbsp; &nbsp; 它实现了MessageListener接口，里面的onMessage方法就是在接收到消息之后会被调用的方法。</P>
<P>&nbsp; &nbsp; 
现在，通过实现前面的publisher和consumer我们已经实现了pub-sub模式的一个实例。仔细回想它的步骤的话，主要就是要两者设定一个共同的topic，有了这个topic之后他们可以实现一方发消息另外一方接收。另外，为了连接到具体的message 
server,这里是使用了连接tcp://localhost:16161作为定义ActiveMQConnectionFactory的路径。在publisher端通过session创建producer，根据指定的参数创建destination，然后将消息和destination作为producer.send()方法的参数发消息。在consumer端也要创建类似的connection, 
session。通过session得到destination，再通过session.createConsumer(destination)来得到一个MessageConsumer对象。有了这个MessageConsumer我们就可以自行选择是直接同步的receive消息还是注册listener了。</P>
<H1>p2p</H1>
<P>&nbsp; &nbsp; 
p2p的过程则理解起来更加简单。它好比是两个人打电话，这两个人是独享这一条通信链路的。一方发送消息，另外一方接收，就这么简单。在实际应用中因为有多个用户对使用p2p的链路，它的通信场景如下图所示：</P>
<P><IMG style="DISPLAY: block; MARGIN-LEFT: auto; MARGIN-RIGHT: auto" alt="" 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/847f46bb-3d45-3e6f-b663-05669360c5b1.jpg"></P>
<P>&nbsp; &nbsp; 我们再来看看一个p2p的示例：</P>
<P>&nbsp; &nbsp; 
在p2p的场景里，相互通信的双方是通过一个类似于队列的方式来进行交流。和前面pub-sub的区别在于一个topic有一个发送者和多个接收者，而在p2p里一个queue只有一个发送者和一个接收者。</P>
<H2>发送者</H2>
<P>&nbsp; &nbsp; 和前面的示例非常相似，我们构造函数里需要初始化的内容基本上差不多：</P>
<P>&nbsp;</P><PRE class=java name="code">public Publisher() throws JMSException {
    factory = new ActiveMQConnectionFactory(brokerURL);
    connection = factory.createConnection();
    connection.start();
    session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
    producer = session.createProducer(null);
}</PRE>&nbsp; &nbsp; &nbsp;发送消息的方法如下： 
<P>&nbsp;</P>
<P>&nbsp;</P><PRE class=java name="code">public void sendMessage() throws JMSException {
    for(int i = 0; i &lt; jobs.length; i++)
    {
       	String job = jobs[i];
       	Destination destination = session.createQueue("JOBS." + job);
       	Message message = session.createObjectMessage(i);
       	System.out.println("Sending: id: " + ((ObjectMessage)message).getObject() + " on queue: " + destination);
       	producer.send(destination, message);
    }
}</PRE>&nbsp; &nbsp; &nbsp;这里我们定义了一个jobs的数组，通过遍历这个数组来创建不同的job 
queue。这样就相当于建立了多个点对点通信的链路。 
<P>&nbsp;</P>
<P>&nbsp; &nbsp; 消息发送者的启动代码如下：</P>
<P>&nbsp;</P><PRE class=java name="code">public static void main(String[] args) throws JMSException {
    Publisher publisher = new Publisher();
    for(int i = 0; i &lt; 10; i++) {
        publisher.sendMessage();
        System.out.println("Published " + i + " job messages");
	try {
            Thread.sleep(1000);
        } catch (InterruptedException x) {
	    e.printStackTrace();
        }
    }
    publisher.close();
}</PRE>&nbsp; &nbsp; 
&nbsp;我们在这里发送10条消息，当然，在每个sendMessage的方法里实际上是针对每个queue发送了10条。 
<P>&nbsp;</P>
<P>&nbsp;</P>
<H2>接收者</H2>
<P>&nbsp; &nbsp; &nbsp;接收者的代码很简单，一个构造函数初始化所有的资源：</P>
<P>&nbsp;</P><PRE class=java name="code">public Consumer() throws JMSException {
    	factory = new ActiveMQConnectionFactory(brokerURL);
    	connection = factory.createConnection();
        connection.start();
        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
    }</PRE>&nbsp; &nbsp; 还有一个就是注册消息处理的对象： 
<P>&nbsp;</P>
<P>&nbsp;</P><PRE class=java name="code">public static void main(String[] args) throws JMSException {
    	Consumer consumer = new Consumer();
    	for (String job : consumer.jobs) {
    		Destination destination = consumer.getSession().createQueue("JOBS." + job);
    		MessageConsumer messageConsumer = consumer.getSession().createConsumer(destination);
    		messageConsumer.setMessageListener(new Listener(job));
    	}
    }
	
	public Session getSession() {
		return session;
	}</PRE>&nbsp; &nbsp; &nbsp;具体注册的对象处理方法和前面还是类似，实现MessageListener接口就可以了。</DIV>
<DIV style="FONT-SIZE: 14px" class=iteye-blog-content-contain><PRE class=java name="code">import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.ObjectMessage;

public class Listener implements MessageListener {

	private String job;
	
	public Listener(String job) {
		this.job = job;
	}

	public void onMessage(Message message) {
		try {
			//do something here
			System.out.println(job + " id:" + ((ObjectMessage)message).getObject());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}</PRE>&nbsp; &nbsp; &nbsp;这里代码和前面pub-sub的具体实现代码非常相似，就不再赘述。 
<P>&nbsp;</P>
<P>&nbsp; &nbsp; 
&nbsp;现在如果我们比较一下pub-sub和p2p模式的具体实现步骤的话，我们会发现他们基本的处理流程都是类似的，除了在pub-sub中要通过createTopic来设置topic，而在p2p中要通过createQueue来创建通信队列。他们之间存在着很多的重复之处，在具体的开发过程中，我们是否可以进行一些工程上的优化呢？别急，后面我们会讨论到的。</P>
<H1>request-response</H1>
<P>&nbsp; &nbsp; 
和前面两种方式比较起来，request-response的通信方式很常见，但是不是默认提供的一种模式。在前面的两种模式中都是一方负责发送消息而另外一方负责处理。而我们实际中的很多应用相当于一种一应一答的过程，需要双方都能给对方发送消息。于是请求-应答的这种通信方式也很重要。它也应用的很普遍。&nbsp;</P>
<P>&nbsp; &nbsp; 
&nbsp;请求-应答方式并不是JMS规范系统默认提供的一种通信方式，而是通过在现有通信方式的基础上稍微运用一点技巧实现的。下图是典型的请求-应答方式的交互过程：<IMG 
style="DISPLAY: block; MARGIN-LEFT: auto; MARGIN-RIGHT: auto" alt="" 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/b031376e-2af7-3502-b235-8c4db1ad890f.jpg"></P>
<P>&nbsp; &nbsp; 
&nbsp;在JMS里面，如果要实现请求/应答的方式，可以利用JMSReplyTo和JMSCorrelationID消息头来将通信的双方关联起来。另外，QueueRequestor和TopicRequestor能够支持简单的请求/应答过程。</P>
<P>&nbsp; &nbsp; 現在，如果我们要实现这么一个过程，在发送请求消息并且等待返回结果的client端的流程如下：</P><PRE class=java name="code">// client side
Destination tempDest = session.createTemporaryQueue();
MessageConsumer responseConsumer = session.createConsumer(tempDest);
...

// send a request..
message.setJMSReplyTo(tempDest)
message.setJMSCorrelationID(myCorrelationID);

producer.send(message);</PRE>
<P>&nbsp; &nbsp; 
&nbsp;client端创建一个临时队列并在发送的消息里指定了发送返回消息的destination以及correlationID。那么在处理消息的server端得到这个消息后就知道该发送给谁了。Server端的大致流程如下：</P>
<P>&nbsp;</P><PRE class=java name="code">public void onMessage(Message request) {

  Message response = session.createMessage();
  response.setJMSCorrelationID(request.getJMSCorrelationID())

  producer.send(request.getJMSReplyTo(), response)
}</PRE>
<P>&nbsp; &nbsp; 
这里我们是用server端注册MessageListener，通过设置返回信息的CorrelationID和JMSReplyTo将信息返回。</P>
<P>&nbsp; &nbsp; 以上就是发送和接收消息的双方的大致程序结构。具体的实现代码如下：</P>
<H2>&nbsp;Client:</H2><PRE class=java name="code">public Client() {
        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory("tcp://localhost:61616");
        Connection connection;
        try {
            connection = connectionFactory.createConnection();
            connection.start();
            Session session = connection.createSession(transacted, ackMode);
            Destination adminQueue = session.createQueue(clientQueueName);

            //Setup a message producer to send message to the queue the server is consuming from
            this.producer = session.createProducer(adminQueue);
            this.producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);

            //Create a temporary queue that this client will listen for responses on then create a consumer
            //that consumes message from this temporary queue...for a real application a client should reuse
            //the same temp queue for each message to the server...one temp queue per client
            Destination tempDest = session.createTemporaryQueue();
            MessageConsumer responseConsumer = session.createConsumer(tempDest);

            //This class will handle the messages to the temp queue as well
            responseConsumer.setMessageListener(this);

            //Now create the actual message you want to send
            TextMessage txtMessage = session.createTextMessage();
            txtMessage.setText("MyProtocolMessage");

            //Set the reply to field to the temp queue you created above, this is the queue the server
            //will respond to
            txtMessage.setJMSReplyTo(tempDest);

            //Set a correlation ID so when you get a response you know which sent message the response is for
            //If there is never more than one outstanding message to the server then the
            //same correlation ID can be used for all the messages...if there is more than one outstanding
            //message to the server you would presumably want to associate the correlation ID with this
            //message somehow...a Map works good
            String correlationId = this.createRandomString();
            txtMessage.setJMSCorrelationID(correlationId);
            this.producer.send(txtMessage);
        } catch (JMSException e) {
            //Handle the exception appropriately
        }
    }</PRE>
<P>&nbsp; &nbsp; 
这里的代码除了初始化构造函数里的参数还同时设置了两个destination，一个是自己要发送消息出去的destination，在session.createProducer(adminQueue);这一句设置。另外一个是自己要接收的消息destination, 
通过Destination tempDest = session.createTemporaryQueue(); responseConsumer = 
session.createConsumer(tempDest); 
这两句指定了要接收消息的目的地。这里是用的一个临时队列。在前面指定了返回消息的通信队列之后，我们需要通知server端知道发送返回消息给哪个队列。于是txtMessage.setJMSReplyTo(tempDest);指定了这一部分，同时txtMessage.setJMSCorrelationID(correlationId);方法主要是为了保证每次发送回来请求的server端能够知道对应的是哪个请求。这里一个请求和一个应答是相当于对应一个相同的序列号一样。</P>
<P>&nbsp; &nbsp; 
同时，因为client端在发送消息之后还要接收server端返回的消息，所以它也要实现一个消息receiver的功能。这里采用实现MessageListener接口的方式：</P><PRE class=java name="code">public void onMessage(Message message) {
        String messageText = null;
        try {
            if (message instanceof TextMessage) {
                TextMessage textMessage = (TextMessage) message;
                messageText = textMessage.getText();
                System.out.println("messageText = " + messageText);
            }
        } catch (JMSException e) {
            //Handle the exception appropriately
        }
    }</PRE>
<P>&nbsp;</P>
<H2>Server:</H2>
<P>&nbsp; &nbsp; 
&nbsp;这里server端要执行的过程和client端相反，它是先接收消息，在接收到消息后根据提供的JMSCorelationID来发送返回的消息：</P><PRE class=java name="code">public void onMessage(Message message) {
        try {
            TextMessage response = this.session.createTextMessage();
            if (message instanceof TextMessage) {
                TextMessage txtMsg = (TextMessage) message;
                String messageText = txtMsg.getText();
                response.setText(this.messageProtocol.handleProtocolMessage(messageText));
            }

            //Set the correlation ID from the received message to be the correlation id of the response message
            //this lets the client identify which message this is a response to if it has more than
            //one outstanding message to the server
            response.setJMSCorrelationID(message.getJMSCorrelationID());

            //Send the response to the Destination specified by the JMSReplyTo field of the received message,
            //this is presumably a temporary queue created by the client
            this.replyProducer.send(message.getJMSReplyTo(), response);
        } catch (JMSException e) {
            //Handle the exception appropriately
        }
    }</PRE>
<P>&nbsp; &nbsp; 
前面，在replyProducer.send()方法里，message.getJMSReplyTo()就得到了要发送消息回去的destination。</P>
<P>&nbsp; &nbsp; 另外，设置这些发送返回信息的replyProducer的信息主要在构造函数相关的方法里实现了：</P><PRE class=java name="code">public Server() {
        try {
            //This message broker is embedded
            BrokerService broker = new BrokerService();
            broker.setPersistent(false);
            broker.setUseJmx(false);
            broker.addConnector(messageBrokerUrl);
            broker.start();
        } catch (Exception e) {
            //Handle the exception appropriately
        }

        //Delegating the handling of messages to another class, instantiate it before setting up JMS so it
        //is ready to handle messages
        this.messageProtocol = new MessageProtocol();
        this.setupMessageQueueConsumer();
    }

    private void setupMessageQueueConsumer() {
        ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(messageBrokerUrl);
        Connection connection;
        try {
            connection = connectionFactory.createConnection();
            connection.start();
            this.session = connection.createSession(this.transacted, ackMode);
            Destination adminQueue = this.session.createQueue(messageQueueName);

            //Setup a message producer to respond to messages from clients, we will get the destination
            //to send to from the JMSReplyTo header field from a Message
            this.replyProducer = this.session.createProducer(null);
            this.replyProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);

            //Set up a consumer to consume messages off of the admin queue
            MessageConsumer consumer = this.session.createConsumer(adminQueue);
            consumer.setMessageListener(this);
        } catch (JMSException e) {
            //Handle the exception appropriately
        }
    }</PRE>
<P>&nbsp; &nbsp; 
总体来说，整个的交互过程并不复杂，只是比较繁琐。对于请求/应答的方式来说，这种典型交互的过程就是Client端在设定正常发送请求的Queue同时也设定一个临时的Queue。同时在要发送的message里头指定要返回消息的destination以及CorelationID，这些就好比是一封信里面所带的回执。根据这个信息人家才知道怎么给你回信。对于Server端来说则要额外创建一个producer，在处理接收到消息的方法里再利用producer将消息发回去。这一系列的过程看起来很像http协议里面请求-应答的方式，都是一问一答。</P>
<H1>一些应用和改进</H1>
<P>&nbsp; &nbsp; 回顾前面三种基本的通信方式，我们会发现，他们都存在着一定的共同点，比如说都要初始化ConnectionFactory, 
Connection, 
Session等。在使用完之后都要将这些资源关闭。如果每一个实现它的通信端都这么写一通的话，其实是一种简单的重复。从工程的角度来看是完全没有必要的。那么，我们有什么办法可以减少这种重复呢？</P>
<P>&nbsp; &nbsp; 
一种简单的方式就是通过工厂方法封装这些对象的创建和销毁，然后简单的通过调用工厂方法的方式得到他们。另外，既然基本的流程都是在开头创建资源在结尾销毁，我们也可以采用Template 
Method模式的思路。通过继承一个抽象类，在抽象类里提供了资源的封装。所有继承的类只要实现怎么去使用这些资源的方法就可以了。Spring中间的JMSTemplate就提供了这种类似思想的封装。具体的实现可以参考<A 
href="http://zorro.blog.51cto.com/2139862/831986">这篇文章</A>。</P>
<H1>总结</H1>
<P>&nbsp; &nbsp; &nbsp;activemq默认提供了pub-sub, 
p2p这两种通信的方式。同时也提供了一些对request-response方式的支持。实际上，不仅仅是activemq，对于所有其他实现JMS规范的产品都能够提供类似的功能。这里每种方式都不太复杂，主要是创建和管理资源的步骤显得比较繁琐。</P>
<P>&nbsp;</P>
<H1>参考资料</H1>
<P><A 
href="http://www.amazon.com/ActiveMQ-Action-Bruce-Snyder/dp/1933988940/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1373121199&amp;sr=1-1&amp;keywords=activemq+in+action">activemq 
in action&nbsp;</A></P>
<P><A style="LINE-HEIGHT: 1.5" 
href="http://activemq.apache.org/how-should-i-implement-request-response-with-jms.html">http://activemq.apache.org/how-should-i-implement-request-response-with-jms.html</A></P>
<P><A 
href="http://zorro.blog.51cto.com/2139862/831986">http://zorro.blog.51cto.com/2139862/831986</A></P></DIV></DIV>
<DIV class=attachments>
<UL style="DISPLAY: none">
  <LI><A 
  href="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/605c3d41-70af-3c3c-8f9d-0077a252964e.jpg" 
  target=_blank><IMG class=magplus title=点击查看原始大小图片 
  src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/605c3d41-70af-3c3c-8f9d-0077a252964e-thumb.jpg"></A></LI>
  <LI>大小: 46.5 KB</LI></UL>
<UL style="DISPLAY: none">
  <LI><A 
  href="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/b031376e-2af7-3502-b235-8c4db1ad890f.jpg" 
  target=_blank><IMG class=magplus title=点击查看原始大小图片 
  src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/b031376e-2af7-3502-b235-8c4db1ad890f-thumb.jpg"></A></LI>
  <LI>大小: 18.5 KB</LI></UL>
<UL style="DISPLAY: none">
  <LI><A 
  href="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/847f46bb-3d45-3e6f-b663-05669360c5b1.jpg" 
  target=_blank><IMG class=magplus title=点击查看原始大小图片 
  src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/847f46bb-3d45-3e6f-b663-05669360c5b1-thumb.jpg"></A></LI>
  <LI>大小: 39.4 KB</LI></UL>
<UL>
  <LI><A 
  onclick="$$('div.attachments ul').invoke('show');$(this).up(1).hide();return false;" 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/1897635#">查看图片附件</A></LI></UL></DIV><IFRAME 
height=90 src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/794.htm" 
frameBorder=0 width=680 scrolling=no></IFRAME>
<DIV id=bottoms class=clearfix>
<DIV id=share_weibo>分享到： <A title=分享到新浪微博 href="javascript:;" 
data-type="sina"><IMG 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/sina.jpg"></A> <A 
title=分享到腾讯微博 href="javascript:;" data-type="qq"><IMG 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/tec.jpg"></A> 
</DIV></DIV>
<DIV class=blog_nav>
<DIV class=pre_next><A class=next title="java I/O总结" 
href="http://shmilyaw-hotmail-com.iteye.com/blog/1897641">java I/O总结</A> | <A 
class=pre title=java读取properties文件方法和对比 
href="http://shmilyaw-hotmail-com.iteye.com/blog/1899242">java读取properties文件方法和对比</A> 
</DIV></DIV>
<DIV class=blog_bottom>
<UL>
  <LI>2013-07-07 14:42</LI>
  <LI>浏览 43077</LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/1897635#comments">评论(4)</A></LI>
  <LI>分类:<A 
href="http://www.iteye.com/blogs/category/architecture">企业架构</A></LI>
  <LI class=last><A class=more href="http://www.iteye.com/wiki/blog/1897635" 
  target=_blank>相关推荐</A></LI></UL></DIV>
<DIV class=blog_comment>
<H5>评论</H5><A id=comments name=comments></A>
<DIV id=bc2381307>
<DIV class=comment_title>4 楼 <A title=qq1002517 
href="http://qq1002517.iteye.com/" target=_blank>qq1002517</A> 
2015-11-10&nbsp;&nbsp; </DIV>
<DIV class=comment_content><IMG 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/icon_idea.gif">&nbsp; 
GG</DIV></DIV>
<DIV id=bc2380175>
<DIV class=comment_title>3 楼 <A title=hl174 href="http://hl174.iteye.com/" 
target=_blank>hl174</A> 2015-10-12&nbsp;&nbsp; </DIV>
<DIV class=comment_content><IMG 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/icon_idea.gif"> 
赞赞赞</DIV></DIV>
<DIV id=bc2375581>
<DIV class=comment_title>2 楼 <A title=grefr href="http://grefr.iteye.com/" 
target=_blank>grefr</A> 2015-07-27&nbsp;&nbsp; </DIV>
<DIV class=comment_content>楼主写的不错，关于jms和activemq原理性的文章，可以看看这个<BR><A 
href="http://blog.yemou.net/article/query/info/tytfjhfascvhzxcyt127" 
rel=nofollow 
target=_blank>http://blog.yemou.net/article/query/info/tytfjhfascvhzxcyt127</A></DIV></DIV>
<DIV id=bc2370694>
<DIV class=comment_title>1 楼 <A title=HHH独一无二 
href="http://fun913510024.iteye.com/" target=_blank>HHH独一无二</A> 
2015-04-20&nbsp;&nbsp; </DIV>
<DIV class=comment_content>楼主总结很好，刚开始了解这个，收益匪浅</DIV></DIV></DIV>
<DIV class=blog_comment>
<H5>发表评论</H5>
<P style="TEXT-ALIGN: center; MARGIN-TOP: 30px; MARGIN-BOTTOM: 0px"><A 
style="BACKGROUND-COLOR: white" 
href="http://shmilyaw-hotmail-com.iteye.com/login"><IMG 
style="VERTICAL-ALIGN: middle; MARGIN-RIGHT: 10px" 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/login_icon.png"></A><A 
href="http://shmilyaw-hotmail-com.iteye.com/login"> 您还没有登录,请您登录后再发表评论 
</A></P></DIV></DIV>
<SCRIPT type=text/javascript>
  dp.SyntaxHighlighter.HighlightAll('code', true, true);

  $$('#main .blog_content pre[name=code]').each(function(pre, index){ // blog content
    var post_id = 1897635;
    var location = window.location;
    source_url = location.protocol + "//" + location.host + location.pathname + location.search;
    pre.writeAttribute('codeable_id', post_id);
    pre.writeAttribute('codeable_type', "Blog");
    pre.writeAttribute('source_url', source_url);
    pre.writeAttribute('pre_index', index);
    pre.writeAttribute('title', 'activemq的几种基本通信方式总结');
  });

  fix_image_size($$('div.blog_content img'), 700);

  function processComment() {
    $$('#main .blog_comment > div').each(function(comment){// comment
      var post_id = comment.id.substr(2);
      $$("#"+comment.id+" pre[name=code]").each(function(pre, index){
        var location = window.location;
        source_url = location.protocol + "//" + location.host + location.pathname + location.search;
        source_url += "#" + comment.id;
        pre.writeAttribute('codeable_id', post_id);
        pre.writeAttribute('codeable_type', "BlogComment");
        pre.writeAttribute('source_url', source_url);
        pre.writeAttribute('pre_index', index);
        pre.writeAttribute('title', 'activemq的几种基本通信方式总结');
      });
    });
  }

  function quote_comment(id) {
    new Ajax.Request('/editor/quote', {
      parameters: {'id':id, 'type':'BlogComment'},
      onSuccess:function(response){editor.bbcode_editor.textarea.insertAfterSelection(response.responseText);
        Element.scrollTo(editor.bbcode_editor.textarea.element);}
    });
  }

  code_favorites_init();
  processComment();
  new WeiboShare({share_buttons: $('share_weibo'), img_scope: $('blog_content')});
</SCRIPT>
</DIV>
<DIV id=local>
<DIV class=local_top></DIV>
<DIV id=blog_owner>
<DIV id=blog_owner_logo><A href="http://shmilyaw-hotmail-com.iteye.com/"><IMG 
class=logo title="frank-liu的博客: 点缀星辰" alt=frank-liu的博客 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/021b4e25-f6a7-37e0-bf6b-eb89d07723f5.jpg" 
width=1></A></DIV>
<DIV id=blog_owner_name>frank-liu</DIV></DIV>
<DIV id=blog_actions>
<UL>
  <LI>浏览: 332346 次</LI>
  <LI>性别: <IMG title=男 alt=Icon_minigender_1 
  src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/icon_minigender_1.gif"></LI>
  <LI>来自: 北京</LI>
  <LI><IMG 
  src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/offline.gif"></LI></UL></DIV>
<DIV id=user_visits class=clearfix>
<H5>最近访客 <SPAN 
style="PADDING-LEFT: 30px; FONT-SIZE: 12px; FONT-WEIGHT: normal"><A 
href="http://shmilyaw-hotmail-com.iteye.com/blog/user_visits">更多访客&gt;&gt;</A></SPAN></H5>
<DIV class=user_visit>
<DIV class=logo><A href="http://joeytang.iteye.com/" target=_blank><IMG 
class=logo title="joeytang的博客: 大蒜披萨" alt=joeytang的博客 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/c0c09b5d-5cd4-326d-b848-22b2f5bbf31c-thumb.png" 
width=48></A></DIV>
<DIV class=left><A title=joeytang href="http://joeytang.iteye.com/" 
target=_blank>joeytang</A></DIV></DIV>
<DIV class=user_visit>
<DIV class=logo><A href="http://ha-san-163-com.iteye.com/" target=_blank><IMG 
class=logo title="面向对象的猪的博客: " alt=面向对象的猪的博客 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/3209522e-9db6-3270-a9c5-03af9de0cd9f-thumb.jpg" 
width=48></A></DIV>
<DIV class=left><A title=面向对象的猪 href="http://ha-san-163-com.iteye.com/" 
target=_blank>面向对象的猪</A></DIV></DIV>
<DIV class=user_visit>
<DIV class=logo><A href="http://gkuiyj.iteye.com/" target=_blank><IMG class=logo 
title="gkuiyj的博客: 鼠标上的猫" alt=gkuiyj的博客 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/66d910a4-87f1-3418-b5f9-6d4cdd20de62-thumb.jpg" 
width=48></A></DIV>
<DIV class=left><A title=gkuiyj href="http://gkuiyj.iteye.com/" 
target=_blank>gkuiyj</A></DIV></DIV>
<DIV class=user_visit>
<DIV class=logo><A href="http://colin-cao.iteye.com/" target=_blank><IMG 
class=logo title="colin_cao的博客: " alt=colin_cao的博客 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/user-logo-thumb.gif" 
width=48></A></DIV>
<DIV class=left><A title=colin_cao href="http://colin-cao.iteye.com/" 
target=_blank>colin_cao</A></DIV></DIV></DIV>
<DIV id=blog_menu>
<H5>文章分类</H5>
<UL>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/">全部博客 (151)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/199294">uml 
  (11)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/205237">java 
  (135)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/213123">python 
  (11)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/227250">socket 
  (2)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/233254">ant 
  (1)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/236474">data 
  structures (52)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/236475">algorithms 
  (60)</A></LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/category/246637">concurrency 
  (16)</A></LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/category/246638">multithreading 
  (16)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/250222">mysql 
  (2)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/250223">ubuntu 
  (2)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/270738">c语言 
  (1)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/270741">lucene 
  (0)</A></LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/category/270742">elasticsearch 
  (0)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/270743">django 
  (1)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/271599">读书 观点 
  (2)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/271600">读书 
  (4)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/271601">观点 
  (4)</A></LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/category/283810">collections 
  (8)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/283906">nio 
  (1)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/283907">io 
  (2)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/284148">系统集成 
  (1)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/284149">activemq 
  (2)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/284150">restful 
  (0)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/284151">web 
  service (0)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/284489">HttpClient 
  (1)</A></LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/category/285517">serializable 
  (0)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/287014">annotation 
  (1)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/289268">jdbc 
  (2)</A></LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/category/291375">classloader 
  (0)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/293763">regular 
  expression (1)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/296364">jpa 
  (4)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/297758">jvm 
  (0)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/297974">reflection 
  (1)</A></LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/category/299110">commons-pool2 
  (2)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/308800">javamail 
  (1)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/308801">velocity 
  (1)</A></LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/category/313373">mathematics 
  (3)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/322434">graph 
  (6)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/324245">LeetCode 
  (7)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/324246">scala 
  (0)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/328029">spring 
  (15)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/328279">maven 
  (5)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/329881">spring 
  batch (1)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/330069">quartz 
  (2)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/330178">IOC 
  (2)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/337195">ORM 
  (3)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/337723">hibernate 
  (2)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/339864">aop 
  (1)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/339994">redis 
  (0)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/339995">zookeeper 
  (0)</A></LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/category/345240">spring mvc 
  (4)</A></LI></UL></DIV>
<DIV id=month_blogs>
<H5>社区版块</H5>
<UL>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/blog/news">我的资讯</A> 
(0)</LI>
  <LI><A href="http://shmilyaw-hotmail-com.iteye.com/blog/post">我的论坛</A> (38) 
  </LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/answered_problems">我的问答</A> 
  (3)</LI></UL></DIV>
<DIV id=month_blogs>
<H5>存档分类</H5>
<UL>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/monthblog/2015-11">2015-11</A> 
  (2)</LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/monthblog/2015-09">2015-09</A> 
  (3)</LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/monthblog/2015-08">2015-08</A> 
  (1)</LI>
  <LI><A 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/monthblog_more">更多存档...</A></LI></UL></DIV>
<DIV id=comments_top>
<H5>评论排行榜</H5>
<UL>
  <LI><A title="spring quartz学习总结： cluster的配置和示例" 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/2169156">spring quartz学习总结： 
  cluster的配置和 ...</A></LI>
  <LI><A title="spring quartz学习总结： 基本任务结构和定义" 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/2169047">spring quartz学习总结： 
  基本任务结构和 ...</A></LI></UL></DIV>
<DIV id=guest_books>
<H5>最新评论</H5>
<UL>
  <LI><A title=ouyangshixiong href="http://ouyangshixiong.iteye.com/" 
  target=_blank>ouyangshixiong</A>： 很清晰，非常赞。<BR><A 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/1969190#bc2381750">JPA学习总结</A> 
  </LI>
  <LI><A title=qq1002517 href="http://qq1002517.iteye.com/" 
  target=_blank>qq1002517</A>： &nbsp; GG<BR><A 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/1897635#bc2381307">activemq的几种基本通信方式总结</A> 
  </LI>
  <LI><A title=hl174 href="http://hl174.iteye.com/" target=_blank>hl174</A>： 
  赞赞赞<BR><A 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/1897635#bc2380175">activemq的几种基本通信方式总结</A> 
  </LI>
  <LI><A title=grefr href="http://grefr.iteye.com/" target=_blank>grefr</A>： 
  楼主写的不错，关于jms和activemq原理性的文章，可以看 ...<BR><A 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/1897635#bc2375581">activemq的几种基本通信方式总结</A> 
  </LI>
  <LI><A title=frank-liu href="http://shmilyaw-hotmail-com.iteye.com/" 
  target=_blank>frank-liu</A>： panda1960 写道请教一下，只向ForkJoinPool ...<BR><A 
  href="http://shmilyaw-hotmail-com.iteye.com/blog/1897636#bc2372166">java 
  fork-join框架应用和分析</A> </LI></UL></DIV>
<DIV class=local_bottom></DIV></DIV></DIV>
<DIV id=footer class=clearfix>
<DIV id=copyright>
<HR>
声明：ITeye文章版权属于作者，受法律保护。没有作者书面许可不得转载。若作者同意转载，必须以超链接形式标明文章原始出处和作者。<BR>© 2003-2015 
ITeye.com. All rights reserved. [ 京ICP证110151号 京公网安备110105010620 ] 
</DIV></DIV></DIV>
<SCRIPT type=text/javascript>
  document.write("<img src='http://stat.iteye.com/?url="+ encodeURIComponent(document.location.href) + "&referrer=" + encodeURIComponent(document.referrer) + "&user_id=' width='0' height='0' />");
</SCRIPT>

<SCRIPT type=text/javascript 
src="activemq的几种基本通信方式总结%20-%20点缀星辰%20-%20ITeye技术网站_files/tracking.js"></SCRIPT>
</BODY></HTML>
