<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0046)http://01121264-163-com.iteye.com/blog/1530063 -->
<HTML dir=ltr xml:lang="zh-CN" 
xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>Servlet中Web.xml的配置详解 - - ITeye技术网站</TITLE>
<META content="text/html; charset=UTF-8" http-equiv=Content-Type>
<META name=description 
content="1 定义头和根元素 部署描述符文件就像所有XML文件一样，必须以一个XML头开始。这个头声明可以使用的XML版本并给出文件的字符编码。 DOCYTPE声明必须立即出现在此头之后。这个声明告诉服务器适用的servlet规范的版本（如2.2或2.3）并指定管理此文件其余部分内容的语法的DTD(Document Type Definition，文档类型定义)。 所有部署描述符文件的顶层（根）元素为web- ...">
<META name=keywords content=" Servlet中Web.xml的配置详解"><LINK rel="shortcut icon" 
type=image/x-icon href="/images/favicon.ico"><LINK title=ITeye rel=search 
type=application/opensearchdescription+xml href="/open_search.xml"><LINK 
title="" rel=alternate type=application/rss+xml href="/rss"><LINK rel=stylesheet 
type=text/css href="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/blog.css" 
media=screen><LINK rel=stylesheet type=text/css 
href="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/blue.css" media=screen>
<SCRIPT type=text/javascript 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/application.js"></SCRIPT>

<SCRIPT type=text/javascript>

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-535605-1']);
  _gaq.push(['_setDomainName', 'iteye.com']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</SCRIPT>
<LINK rel=stylesheet type=text/css 
href="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/SyntaxHighlighter.css" 
media=screen>
<SCRIPT type=text/javascript 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/shCoreCommon.js"></SCRIPT>

<SCRIPT type=text/javascript 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/hotkey.js"></SCRIPT>

<SCRIPT type=text/javascript 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/code_favorites.js"></SCRIPT>

<SCRIPT type=text/javascript 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/weiboshare.js"></SCRIPT>

<META name=GENERATOR content="MSHTML 8.00.7601.17622"></HEAD>
<BODY>
<DIV id=header>
<DIV id=blog_site_nav><A class=homepage href="http://www.iteye.com/">首页</A> <A 
href="http://www.iteye.com/news">资讯</A> <A 
href="http://www.iteye.com/magazines">精华</A> <A 
href="http://www.iteye.com/forums">论坛</A> <A 
href="http://www.iteye.com/ask">问答</A> <A 
href="http://www.iteye.com/blogs">博客</A> <A 
href="http://www.iteye.com/blogs/subjects">专栏</A> <A 
href="http://www.iteye.com/groups">群组</A> <A id=msna onclick="return false;" 
href="http://01121264-163-com.iteye.com/blog/1530063#"><U>更多</U> 
<SMALL>▼</SMALL></A> 
<DIV style="DISPLAY: none" class=quick_menu><A href="http://job.iteye.com/iteye" 
target=_blank>招聘</A> <A href="http://www.iteye.com/search">搜索</A> </DIV></DIV>
<DIV id=user_nav><A class=welcome title=登录 
href="http://01121264-163-com.iteye.com/login">您还未登录 !</A> <A 
href="http://01121264-163-com.iteye.com/login">登录</A> <A class=nobg 
href="http://01121264-163-com.iteye.com/signup">注册</A> </DIV></DIV>
<DIV id=page>
<DIV id=branding class=clearfix>
<DIV id=blog_name>
<H1><A href="http://01121264-163-com.iteye.com/">01121264-163-com</A></H1></DIV>
<DIV id=fd></DIV>
<DIV id=blog_navbar>
<UL>
  <LI class=blog_navbar_for><A 
  href="http://01121264-163-com.iteye.com/"><STRONG>博客</STRONG></A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/weibo">微博</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/album">相册</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/link">收藏</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/blog/guest_book">留言</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/blog/profile">关于我</A></LI></UL>
<DIV class=search>
<FORM method=get action=/blog/search><INPUT 
style="WIDTH: 110px; MARGIN-LEFT: 10px" id=query class=search_text type=text 
name=query> <INPUT class=submit_search type=submit> </FORM></DIV>
<DIV id=fd></DIV></DIV></DIV>
<DIV id=content class=clearfix>
<DIV id=main>
<DIV style="DISPLAY: none" class=h-entry><A class=p-author 
href="http://01121264-163-com.iteye.com/" target=_blank>伊然01</A> </DIV>
<DIV class=blog_main>
<DIV class=blog_title>
<H3><A 
href="http://01121264-163-com.iteye.com/blog/1530063">Servlet中Web.xml的配置详解</A> 
<EM class=actions></EM></H3>
<UL class=blog_categories><STRONG>博客分类：</STRONG> 
  <LI><A href="http://01121264-163-com.iteye.com/category/152889">xml</A></LI>
  <LI><A 
href="http://01121264-163-com.iteye.com/category/152891">Java</A></LI></UL>
<DIV class=news_tag>&nbsp;</DIV></DIV>
<DIV id=blog_content class=blog_content>1 定义头和根元素 
<BR><BR>部署描述符文件就像所有XML文件一样，必须以一个XML头开始。这个头声明可以使用的XML版本并给出文件的字符编码。 
<BR>DOCYTPE声明必须立即出现在此头之后。这个声明告诉服务器适用的servlet规范的版本（如2.2或2.3）并指定管理此文件其余部分内容的语法的DTD(Document 
Type Definition，文档类型定义)。 
<BR>所有部署描述符文件的顶层（根）元素为web-app。请注意，XML元素不像HTML，他们是大小写敏感的。因此，web-App和WEB-APP都是不合法的，web-app必须用小写。 
<BR><BR>2 部署描述符文件内的元素次序 
<BR><BR>XML元素不仅是大小写敏感的，而且它们还对出现在其他元素中的次序敏感。例如，XML头必须是文件中的第一项，DOCTYPE声明必须是第二项，而web-app元素必须是第三项。在web-app元素内，元素的次序也很重要。服务器不一定强制要求这种次序，但它们允许（实际上有些服务器就是这样做的）完全拒绝执行含有次序不正确的元素的Web应用。这表示使用非标准元素次序的web.xml文件是不可移植的。 
<BR>下面的列表给出了所有可直接出现在web-app元素内的合法元素所必需的次序。例如，此列表说明servlet元素必须出现在所有servlet-mapping元素之前。请注意，所有这些元素都是可选的。因此，可以省略掉某一元素，但不能把它放于不正确的位置。 
<BR>l icon icon元素指出IDE和GUI工具用来表示Web应用的一个和两个图像文件的位置。 <BR>l display-name 
display-name元素提供GUI工具可能会用来标记这个特定的Web应用的一个名称。 <BR>l description 
description元素给出与此有关的说明性文本。 <BR>l context-param context-param元素声明应用范围内的初始化参数。 
<BR>l filter 过滤器元素将一个名字与一个实现javax.servlet.Filter接口的类相关联。 <BR>l filter-mapping 
一旦命名了一个过滤器，就要利用filter-mapping元素把它与一个或多个servlet或JSP页面相关联。 <BR>llistener servlet 
API的版本2.3增加了对事件监听程序的支持，事件监听程序在建立、修改和删除会话或servlet环境时得到通知。Listener元素指出事件监听程序类。 
<BR>lservlet 
在向servlet或JSP页面制定初始化参数或定制URL时，必须首先命名servlet或JSP页面。Servlet元素就是用来完成此项任务的。 
<BR>lservlet-mapping 
服务器一般为servlet提供一个缺省的URL：http://host/webAppPrefix/servlet/ServletName。但是，常常会更改这个URL，以便servlet可以访问初始化参数或更容易地处理相对URL。在更改缺省URL时，使用servlet-mapping元素。 
<BR>lsession-config 
如果某个会话在一定时间内未被访问，服务器可以抛弃它以节省内存。可通过使用HttpSession的setMaxInactiveInterval方法明确设置单个会话对象的超时值，或者可利用session-config元素制定缺省超时值。 
<BR>lmime-mapping 如果Web应用具有想到特殊的文件，希望能保证给他们分配特定的MIME类型，则mime-mapping元素提供这种保证。 
<BR>lwelcom-file-list welcome-file-list元素指示服务器在收到引用一个目录名而不是文件名的URL时，使用哪个文件。 
<BR>l error-page error-page元素使得在返回特定HTTP状态代码时，或者特定类型的异常被抛出时，能够制定将要显示的页面。 <BR>l 
taglib taglib元素对标记库描述符文件（Tag Libraryu Descriptor 
file）指定别名。此功能使你能够更改TLD文件的位置，而不用编辑使用这些文件的JSP页面。 <BR>l resource-env-ref 
resource-env-ref元素声明与资源相关的一个管理对象。 <BR>l resource-ref 
resource-ref元素声明一个资源工厂使用的外部资源。 <BR>l security-constraint 
security-constraint元素制定应该保护的URL。它与login-config元素联合使用 <BR>l login-config 
用login-config元素来指定服务器应该怎样给试图访问受保护页面的用户授权。它与sercurity-constraint元素联合使用。 <BR>l 
security-role 
security-role元素给出安全角色的一个列表，这些角色将出现在servlet元素内的security-role-ref元素的role-name子元素中。分别地声明角色可使高级IDE处理安全信息更为容易。 
<BR>l env-entry env-entry元素声明Web应用的环境项。 <BR>l ejb-ref ejb-ref元素声明一个EJB的主目录的引用。 
<BR>l ejb-local-ref ejb-local-ref元素声明一个EJB的本地主目录的应用。 <BR><BR>3 分配名称和定制的UL 
<BR><BR>在web.xml中完成的一个最常见的任务是对servlet或JSP页面给出名称和定制的URL。用servlet元素分配名称，使用servlet-mapping元素将定制的URL与刚分配的名称相关联。 
<BR>3.1 分配名称 
<BR>为了提供初始化参数，对servlet或JSP页面定义一个定制URL或分配一个安全角色，必须首先给servlet或JSP页面一个名称。可通过servlet元素分配一个名称。最常见的格式包括servlet-name和servlet-class子元素（在web-app元素内），如下所示： 
<BR>&lt;servlet&gt; <BR>&lt;servlet-name&gt;Test&lt;/servlet-name&gt; 
<BR>&lt;servlet-class&gt;moreservlets.TestServlet&lt;/servlet-class&gt; 
<BR>&lt;/servlet&gt; 
<BR>这表示位于WEB-INF/classes/moreservlets/TestServlet的servlet已经得到了注册名Test。给servlet一个名称具有两个主要的含义。首先，初始化参数、定制的URL模式以及其他定制通过此注册名而不是类名引用此servlet。其次,可在URL而不是类名中使用此名称。因此，利用刚才给出的定义，URL 
http://host/webAppPrefix/servlet/Test 可用于 
http://host/webAppPrefix/servlet/moreservlets.TestServlet 的场所。 
<BR>请记住：XML元素不仅是大小写敏感的，而且定义它们的次序也很重要。例如，web-app元素内所有servlet元素必须位于所有servlet-mapping元素（下一小节介绍）之前，而且还要位于5.6节和5.11节讨论的与过滤器或文档相关的元素（如果有的话）之前。类似地，servlet的servlet-name子元素也必须出现在servlet-class之前。5.2节"部署描述符文件内的元素次序"将详细介绍这种必需的次序。 
<BR>例如，程序清单5-1给出了一个名为TestServlet的简单servlet，它驻留在moreservlets程序包中。因为此servlet是扎根在一个名为deployDemo的目录中的Web应用的组成部分，所以TestServlet.class放在deployDemo/WEB-INF/classes/moreservlets中。程序清单5-2给出将放置在deployDemo/WEB-INF/内的web.xml文件的一部分。此web.xml文件使用servlet-name和servlet-class元素将名称Test与TestServlet.class相关联。图5-1和图5-2分别显示利用缺省URL和注册名调用TestServlet时的结果。 
<BR><BR>程序清单5-1 TestServlet.java <BR>package moreservlets; <BR><BR>import 
java.io.*; <BR>import javax.servlet.*; <BR>import javax.servlet.http.*; 
<BR><BR>/** Simple servlet used to illustrate servlet naming <BR>* and custom 
URLs. <BR>* &lt;P&gt; <BR>* Taken from More Servlets and JavaServer Pages <BR>* 
from Prentice Hall and Sun Microsystems Press, <BR>* 
http://www.moreservlets.com/. <BR>* &amp;copy; 2002 Marty Hall; may be freely 
used or adapted. <BR>*/ <BR><BR>public class TestServlet extends HttpServlet { 
<BR>public void doGet(HttpServletRequest request, <BR>HttpServletResponse 
response) <BR>throws ServletException, IOException { 
<BR>response.setContentType("text/html"); <BR>PrintWriter out = 
response.getWriter(); <BR>String uri = request.getRequestURI(); 
<BR>out.println(ServletUtilities.headWithTitle("Test Servlet") + <BR>"&lt;BODY 
BGCOLOR=/"#FDF5E6/"&gt;/n" + <BR>"&lt;H2&gt;URI: " + uri + "&lt;/H2&gt;/n" + 
<BR>"&lt;/BODY&gt;&lt;/HTML&gt;"); <BR>} <BR>} <BR><BR><BR>程序清单5-2 
web.xml（说明servlet名称的摘录） <BR>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt; 
<BR>&lt;!DOCTYPE web-app <BR>PUBLIC "-//Sun Microsystems, Inc.//DTD Web 
Application 2.3//EN" <BR>"http://java.sun.com/dtd/web-app_2_3.dtd"&gt; 
<BR><BR>&lt;web-app&gt; <BR>&lt;!-- … --&gt; <BR>&lt;servlet&gt; 
<BR>&lt;servlet-name&gt;Test&lt;/servlet-name&gt; 
<BR>&lt;servlet-class&gt;moreservlets.TestServlet&lt;/servlet-class&gt; 
<BR>&lt;/servlet&gt; <BR>&lt;!-- … --&gt; <BR>&lt;/web-app&gt; <BR><BR>3.2 
定义定制的URL <BR>大多数服务器具有一个缺省的serlvet URL： 
<BR>http://host/webAppPrefix/servlet/packageName.ServletName。虽然在开发中使用这个URL很方便，但是我们常常会希望另一个URL用于部署。例如，可能会需要一个出现在Web应用顶层的URL（如，http://host/webAppPrefix/Anyname），并且在此URL中没有servlet项。位于顶层的URL简化了相对URL的使用。此外，对许多开发人员来说，顶层URL看上去比更长更麻烦的缺省URL更简短。 
<BR>事实上，有时需要使用定制的URL。比如，你可能想关闭缺省URL映射，以便更好地强制实施安全限制或防止用户意外地访问无初始化参数的servlet。如果你禁止了缺省的URL，那么你怎样访问servlet呢？这时只有使用定制的URL了。 
<BR>为了分配一个定制的URL，可使用servlet-mapping元素及其servlet-name和url-pattern子元素。Servlet-name元素提供了一个任意名称，可利用此名称引用相应的servlet；url-pattern描述了相对于Web应用的根目录的URL。url-pattern元素的值必须以斜杠（/）起始。 
<BR>下面给出一个简单的web.xml摘录，它允许使用URL 
http://host/webAppPrefix/UrlTest而不是http://host/webAppPrefix/servlet/Test或 
<BR>http://host/webAppPrefix/servlet/moreservlets.TestServlet。请注意，仍然需要XML头、DOCTYPE声明以及web-app封闭元素。此外，可回忆一下，XML元素出现地次序不是随意的。特别是，需要把所有servlet元素放在所有servlet-mapping元素之前。 
<BR>&lt;servlet&gt; <BR>&lt;servlet-name&gt;Test&lt;/servlet-name&gt; 
<BR>&lt;servlet-class&gt;moreservlets.TestServlet&lt;/servlet-class&gt; 
<BR>&lt;/servlet&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;servlet-mapping&gt; 
<BR>&lt;servlet-name&gt;Test&lt;/servlet-name&gt; 
<BR>&lt;url-pattern&gt;/UrlTest&lt;/url-pattern&gt; <BR>&lt;/servlet-mapping&gt; 
<BR>URL模式还可以包含通配符。例如，下面的小程序指示服务器发送所有以Web应用的URL前缀开始，以..asp结束的请求到名为BashMS的servlet。 
<BR>&lt;servlet&gt; <BR>&lt;servlet-name&gt;BashMS&lt;/servlet-name&gt; 
<BR>&lt;servlet-class&gt;msUtils.ASPTranslator&lt;/servlet-class&gt; 
<BR>&lt;/servlet&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;servlet-mapping&gt; 
<BR>&lt;servlet-name&gt;BashMS&lt;/servlet-name&gt; 
<BR>&lt;url-pattern&gt;/*.asp&lt;/url-pattern&gt; <BR>&lt;/servlet-mapping&gt; 
<BR>3.3 命名JSP页面 
<BR>因为JSP页面要转换成sevlet，自然希望就像命名servlet一样命名JSP页面。毕竟，JSP页面可能会从初始化参数、安全设置或定制的URL中受益，正如普通的serlvet那样。虽然JSP页面的后台实际上是servlet这句话是正确的，但存在一个关键的猜疑：即，你不知道JSP页面的实际类名（因为系统自己挑选这个名字）。因此，为了命名JSP页面，可将jsp-file元素替换为servlet-calss元素，如下所示： 
<BR>&lt;servlet&gt; <BR>&lt;servlet-name&gt;Test&lt;/servlet-name&gt; 
<BR>&lt;jsp-file&gt;/TestPage.jsp&lt;/jsp-file&gt; <BR>&lt;/servlet&gt; 
<BR>命名JSP页面的原因与命名servlet的原因完全相同：即为了提供一个与定制设置（如，初始化参数和安全设置）一起使用的名称，并且，以便能更改激活JSP页面的URL（比方说，以便多个URL通过相同页面得以处理，或者从URL中去掉.jsp扩展名）。但是，在设置初始化参数时，应该注意，JSP页面是利用jspInit方法，而不是init方法读取初始化参数的。 
<BR>例如，程序清单5-3给出一个名为TestPage.jsp的简单JSP页面，它的工作只是打印出用来激活它的URL的本地部分。TestPage.jsp放置在deployDemo应用的顶层。程序清单5-4给出了用来分配一个注册名PageName，然后将此注册名与http://host/webAppPrefix/UrlTest2/anything 
形式的URL相关联的web.xml文件（即，deployDemo/WEB-INF/web.xml）的一部分。 <BR><BR>程序清单5-3 
TestPage.jsp <BR>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 
Transitional//EN"&gt; <BR>&lt;HTML&gt; <BR>&lt;HEAD&gt; <BR>&lt;TITLE&gt; 
<BR>JSP Test Page <BR>&lt;/TITLE&gt; <BR>&lt;/HEAD&gt; <BR>&lt;BODY 
BGCOLOR="#FDF5E6"&gt; <BR>&lt;H2&gt;URI: &lt;%= request.getRequestURI() 
%&gt;&lt;/H2&gt; <BR>&lt;/BODY&gt; <BR>&lt;/HTML&gt; <BR><BR><BR>程序清单5-4 
web.xml（说明JSP页命名的摘录） <BR>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt; 
<BR>&lt;!DOCTYPE web-app <BR>PUBLIC "-//Sun Microsystems, Inc.//DTD Web 
Application 2.3//EN" <BR>"http://java.sun.com/dtd/web-app_2_3.dtd"&gt; 
<BR><BR>&lt;web-app&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;servlet&gt; 
<BR>&lt;servlet-name&gt;PageName&lt;/servlet-name&gt; 
<BR>&lt;jsp-file&gt;/TestPage.jsp&lt;/jsp-file&gt; <BR>&lt;/servlet&gt; 
<BR>&lt;!-- ... --&gt; <BR>&lt;servlet-mapping&gt; <BR>&lt;servlet-name&gt; 
PageName &lt;/servlet-name&gt; 
<BR>&lt;url-pattern&gt;/UrlTest2/*&lt;/url-pattern&gt; 
<BR>&lt;/servlet-mapping&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;/web-app&gt; 
<BR><BR><BR>4 禁止激活器servlet 
<BR><BR>对servlet或JSP页面建立定制URL的一个原因是，这样做可以注册从init（servlet）或jspInit（JSP页面）方法中读取得初始化参数。但是，初始化参数只在是利用定制URL模式或注册名访问servlet或JSP页面时可以使用，用缺省URL 
http://host/webAppPrefix/servlet/ServletName 
访问时不能使用。因此，你可能会希望关闭缺省URL，这样就不会有人意外地调用初始化servlet了。这个过程有时称为禁止激活器servlet，因为多数服务器具有一个用缺省的servlet 
URL注册的标准servlet，并激活缺省的URL应用的实际servlet。 <BR>有两种禁止此缺省URL的主要方法： <BR>l 
在每个Web应用中重新映射/servlet/模式。 <BR>l 全局关闭激活器servlet。 
<BR>重要的是应该注意到，虽然重新映射每个Web应用中的/servlet/模式比彻底禁止激活servlet所做的工作更多，但重新映射可以用一种完全可移植的方式来完成。相反，全局禁止激活器servlet完全是针对具体机器的，事实上有的服务器（如ServletExec）没有这样的选择。下面的讨论对每个Web应用重新映射/servlet/ 
URL模式的策略。后面提供在Tomcat中全局禁止激活器servlet的详细内容。 <BR>4.1 重新映射/servlet/URL模式 
<BR>在一个特定的Web应用中禁止以http://host/webAppPrefix/servlet/ 
开始的URL的处理非常简单。所需做的事情就是建立一个错误消息servlet，并使用前一节讨论的url-pattern元素将所有匹配请求转向该servlet。只要简单地使用： 
<BR>&lt;url-pattern&gt;/servlet/*&lt;/url-pattern&gt; 
<BR>作为servlet-mapping元素中的模式即可。 <BR>例如，程序清单5-5给出了将SorryServlet 
servlet（程序清单5-6）与所有以http://host/webAppPrefix/servlet/ 开头的URL相关联的部署描述符文件的一部分。 
<BR><BR>程序清单5-5 web.xml（说明JSP页命名的摘录） <BR>&lt;?xml version="1.0" 
encoding="ISO-8859-1"?&gt; <BR>&lt;!DOCTYPE web-app <BR>PUBLIC "-//Sun 
Microsystems, Inc.//DTD Web Application 2.3//EN" 
<BR>"http://java.sun.com/dtd/web-app_2_3.dtd"&gt; <BR><BR>&lt;web-app&gt; 
<BR>&lt;!-- ... --&gt; <BR>&lt;servlet&gt; 
<BR>&lt;servlet-name&gt;Sorry&lt;/servlet-name&gt; 
<BR>&lt;servlet-class&gt;moreservlets.SorryServlet&lt;/servlet-class&gt; 
<BR>&lt;/servlet&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;servlet-mapping&gt; 
<BR>&lt;servlet-name&gt; Sorry &lt;/servlet-name&gt; 
<BR>&lt;url-pattern&gt;/servlet/*&lt;/url-pattern&gt; 
<BR>&lt;/servlet-mapping&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;/web-app&gt; 
<BR><BR><BR>程序清单5-6 SorryServlet.java <BR>package moreservlets; <BR><BR>import 
java.io.*; <BR>import javax.servlet.*; <BR>import javax.servlet.http.*; 
<BR><BR>/** Simple servlet used to give error messages to <BR>* users who try to 
access default servlet URLs <BR>* (i.e., 
http://host/webAppPrefix/servlet/ServletName) <BR>* in Web applications that 
have disabled this <BR>* behavior. <BR>* &lt;P&gt; <BR>* Taken from More 
Servlets and JavaServer Pages <BR>* from Prentice Hall and Sun Microsystems 
Press, <BR>* http://www.moreservlets.com/. <BR>* &amp;copy; 2002 Marty Hall; may 
be freely used or adapted. <BR>*/ <BR><BR>public class SorryServlet extends 
HttpServlet { <BR>public void doGet(HttpServletRequest request, 
<BR>HttpServletResponse response) <BR>throws ServletException, IOException { 
<BR>response.setContentType("text/html"); <BR>PrintWriter out = 
response.getWriter(); <BR>String title = "Invoker Servlet Disabled."; 
<BR>out.println(ServletUtilities.headWithTitle(title) + <BR>"&lt;BODY 
BGCOLOR=/"#FDF5E6/"&gt;/n" + <BR>"&lt;H2&gt;" + title + "&lt;/H2&gt;/n" + 
<BR>"Sorry, access to servlets by means of/n" + <BR>"URLs that begin with/n" + 
<BR>"http://host/webAppPrefix/servlet//n" + <BR>"has been disabled./n" + 
<BR>"&lt;/BODY&gt;&lt;/HTML&gt;"); <BR>} <BR><BR>public void 
doPost(HttpServletRequest request, <BR>HttpServletResponse response) <BR>throws 
ServletException, IOException { <BR>doGet(request, response); <BR>} <BR>} 
<BR><BR><BR>4.2 全局禁止激活器：Tomcat <BR>Tomcat 4中用来关闭缺省URL的方法与Tomcat 
3中所用的很不相同。下面介绍这两种方法： <BR>1．禁止激活器： Tomcat 4 <BR>Tomcat 
4用与前面相同的方法关闭激活器servlet，即利用web.xml中的url-mapping元素进行关闭。不同之处在于Tomcat使用了放在install_dir/conf中的一个服务器专用的全局web.xml文件，而前面使用的是存放在每个Web应用的WEB-INF目录中的标准web.xml文件。 
<BR>因此，为了在Tomcat 4中关闭激活器servlet，只需在install_dir/conf/web.xml中简单地注释出/servlet/* 
URL映射项即可，如下所示： <BR>&lt;!-- <BR>&lt;servlet-mapping&gt; 
<BR>&lt;servlet-name&gt;invoker&lt;/servlet-name&gt; 
<BR>&lt;url-pattern&gt;/servlet/*&lt;/url-pattern&gt; 
<BR>&lt;/servlet-mapping&gt; <BR>--&gt; 
<BR>再次提醒，应该注意这个项是位于存放在install_dir/conf的Tomcat专用的web.xml文件中的，此文件不是存放在每个Web应用的WEB-INF目录中的标准web.xml。 
<BR>2．禁止激活器：Tomcat3 <BR>在Apache 
Tomcat的版本3中，通过在install_dir/conf/server.xml中注释出InvokerInterceptor项全局禁止缺省servlet 
URL。例如，下面是禁止使用缺省servlet URL的server.xml文件的一部分。 <BR>&lt;!-- 
<BR>&lt;RequsetInterceptor 
<BR>className="org.apache.tomcat.request.InvokerInterceptor" <BR>debug="0" 
prefix="/servlet/" /&gt; <BR>--&gt; <BR><BR>5 初始化和预装载servlet与JSP页面 
<BR><BR>这里讨论控制servlet和JSP页面的启动行为的方法。特别是，说明了怎样分配初始化参数以及怎样更改服务器生存期中装载servlet和JSP页面的时刻。 
<BR>5.1 分配servlet初始化参数 
<BR>利用init-param元素向servlet提供初始化参数，init-param元素具有param-name和param-value子元素。例如，在下面的例子中，如果initServlet 
servlet是利用它的注册名（InitTest）访问的，它将能够从其方法中调用getServletConfig().getInitParameter("param1")获得"Value 
1"，调用getServletConfig().getInitParameter("param2")获得"2"。 <BR>&lt;servlet&gt; 
<BR>&lt;servlet-name&gt;InitTest&lt;/servlet-name&gt; 
<BR>&lt;servlet-class&gt;moreservlets.InitServlet&lt;/servlet-class&gt; 
<BR>&lt;init-param&gt; <BR>&lt;param-name&gt;param1&lt;/param-name&gt; 
<BR>&lt;param-value&gt;value1&lt;/param-value&gt; <BR>&lt;/init-param&gt; 
<BR>&lt;init-param&gt; <BR>&lt;param-name&gt;param2&lt;/param-name&gt; 
<BR>&lt;param-value&gt;2&lt;/param-value&gt; <BR>&lt;/init-param&gt; 
<BR>&lt;/servlet&gt; <BR>在涉及初始化参数时，有几点需要注意： <BR>l 
返回值。GetInitParameter的返回值总是一个String。因此，在前一个例子中，可对param2使用Integer.parseInt获得一个int。 
<BR>l JSP中的初始化。JSP页面使用jspInit而不是init。JSP页面还需要使用jsp-file元素代替servlet-class。 <BR>l 
缺省URL。初始化参数只在通过它们的注册名或与它们注册名相关的定制URL模式访问Servlet时可以使用。因此，在这个例子中，param1和param2初始化参数将能够在使用URL 
http://host/webAppPrefix/servlet/InitTest 时可用，但在使用URL 
http://host/webAppPrefix/servlet/myPackage.InitServlet 时不能使用。 
<BR>例如，程序清单5-7给出一个名为InitServlet的简单servlet，它使用init方法设置firstName和emailAddress字段。程序清单5-8给出分配名称InitTest给servlet的web.xml文件。 
<BR>程序清单5-7 InitServlet.java <BR>package moreservlets; <BR><BR>import java.io.*; 
<BR>import javax.servlet.*; <BR>import javax.servlet.http.*; <BR><BR>/** Simple 
servlet used to illustrate servlet <BR>* initialization parameters. <BR>* 
&lt;P&gt; <BR>* Taken from More Servlets and JavaServer Pages <BR>* from 
Prentice Hall and Sun Microsystems Press, <BR>* http://www.moreservlets.com/. 
<BR>* &amp;copy; 2002 Marty Hall; may be freely used or adapted. <BR>*/ 
<BR><BR>public class InitServlet extends HttpServlet { <BR>private String 
firstName, emailAddress; <BR><BR>public void init() { <BR>ServletConfig config = 
getServletConfig(); <BR>firstName = config.getInitParameter("firstName"); 
<BR>emailAddress = config.getInitParameter("emailAddress"); <BR>} <BR><BR>public 
void doGet(HttpServletRequest request, <BR>HttpServletResponse response) 
<BR>throws ServletException, IOException { 
<BR>response.setContentType("text/html"); <BR>PrintWriter out = 
response.getWriter(); <BR>String uri = request.getRequestURI(); 
<BR>out.println(ServletUtilities.headWithTitle("Init Servlet") + <BR>"&lt;BODY 
BGCOLOR=/"#FDF5E6/"&gt;/n" + <BR>"&lt;H2&gt;Init Parameters:&lt;/H2&gt;/n" + 
<BR>"&lt;UL&gt;/n" + <BR>"&lt;LI&gt;First name: " + firstName + "/n" + 
<BR>"&lt;LI&gt;Email address: " + emailAddress + "/n" + <BR>"&lt;/UL&gt;/n" + 
<BR>"&lt;/BODY&gt;&lt;/HTML&gt;"); <BR>} <BR>} <BR><BR><BR>程序清单5-8 
web.xml（说明初始化参数的摘录） <BR>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt; 
<BR>&lt;!DOCTYPE web-app <BR>PUBLIC "-//Sun Microsystems, Inc.//DTD Web 
Application 2.3//EN" <BR>"http://java.sun.com/dtd/web-app_2_3.dtd"&gt; 
<BR><BR>&lt;web-app&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;servlet&gt; 
<BR>&lt;servlet-name&gt;InitTest&lt;/servlet-name&gt; 
<BR>&lt;servlet-class&gt;moreservlets.InitServlet&lt;/servlet-class&gt; 
<BR>&lt;init-param&gt; <BR>&lt;param-name&gt;firstName&lt;/param-name&gt; 
<BR>&lt;param-value&gt;Larry&lt;/param-value&gt; <BR>&lt;/init-param&gt; 
<BR>&lt;init-param&gt; <BR>&lt;param-name&gt;emailAddress&lt;/param-name&gt; 
<BR>&lt;param-value&gt;Ellison@Microsoft.com&lt;/param-value&gt; 
<BR>&lt;/init-param&gt; <BR>&lt;/servlet&gt; <BR>&lt;!-- ... --&gt; 
<BR>&lt;/web-app&gt; <BR><BR>5.2 分配JSP初始化参数 
<BR>给JSP页面提供初始化参数在三个方面不同于给servlet提供初始化参数。 
<BR>1）使用jsp-file而不是servlet-class。因此，WEB-INF/web.xml文件的servlet元素如下所示： 
<BR>&lt;servlet&gt; <BR>&lt;servlet-name&gt;PageName&lt;/servlet-name&gt; 
<BR>&lt;jsp-file&gt;/RealPage.jsp&lt;/jsp-file&gt; <BR>&lt;init-param&gt; 
<BR>&lt;param-name&gt;...&lt;/param-name&gt; 
<BR>&lt;param-value&gt;...&lt;/param-value&gt; <BR>&lt;/init-param&gt; <BR>... 
<BR>&lt;/servlet&gt; 
<BR>2)几乎总是分配一个明确的URL模式。对servlet，一般相应地使用以http://host/webAppPrefix/servlet/ 
开始的缺省URL。只需记住，使用注册名而不是原名称即可。这对于JSP页面在技术上也是合法的。例如，在上面给出的例子中，可用URL 
http://host/webAppPrefix/servlet/PageName 
访问RealPage.jsp的对初始化参数具有访问权的版本。但在用于JSP页面时，许多用户似乎不喜欢应用常规的servlet的URL。此外，如果JSP页面位于服务器为其提供了目录清单的目录中（如，一个既没有index.html也没有index.jsp文件的目录），则用户可能会连接到此JSP页面，单击它，从而意外地激活未初始化的页面。因此，好的办法是使用url-pattern（5.3节）将JSP页面的原URL与注册的servlet名相关联。这样，客户机可使用JSP页面的普通名称，但仍然激活定制的版本。例如，给定来自项目1的servlet定义，可使用下面的servlet-mapping定义： 
<BR>&lt;servlet-mapping&gt; 
<BR>&lt;servlet-name&gt;PageName&lt;/servlet-name&gt; 
<BR>&lt;url-pattern&gt;/RealPage.jsp&lt;/url-pattern&gt; 
<BR>&lt;/servlet-mapping&gt; 
<BR>3）JSP页使用jspInit而不是init。自动从JSP页面建立的servlet或许已经使用了inti方法。因此，使用JSP声明提供一个init方法是不合法的，必须制定jspInit方法。 
<BR>为了说明初始化JSP页面的过程，程序清单5-9给出了一个名为InitPage.jsp的JSP页面，它包含一个jspInit方法且放置于deployDemo 
Web应用层次结构的顶层。一般，http://host/deployDemo/InitPage.jsp 
形式的URL将激活此页面的不具有初始化参数访问权的版本，从而将对firstName和emailAddress变量显示null。但是，web.xml文件（程序清单5-10）分配了一个注册名，然后将该注册名与URL模式/InitPage.jsp相关联。 
<BR><BR>程序清单5-9 InitPage.jsp <BR>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 
Transitional//EN"&gt; <BR>&lt;HTML&gt; <BR>&lt;HEAD&gt;&lt;TITLE&gt;JSP Init 
Test&lt;/TITLE&gt;&lt;/HEAD&gt; <BR>&lt;BODY BGCOLOR="#FDF5E6"&gt; 
<BR>&lt;H2&gt;Init Parameters:&lt;/H2&gt; <BR>&lt;UL&gt; <BR>&lt;LI&gt;First 
name: &lt;%= firstName %&gt; <BR>&lt;LI&gt;Email address: &lt;%= emailAddress 
%&gt; <BR>&lt;/UL&gt; <BR>&lt;/BODY&gt;&lt;/HTML&gt; <BR>&lt;%! <BR>private 
String firstName, emailAddress; <BR><BR>public void jspInit() { 
<BR>ServletConfig config = getServletConfig(); <BR>firstName = 
config.getInitParameter("firstName"); <BR>emailAddress = 
config.getInitParameter("emailAddress"); <BR>} <BR>%&gt; <BR><BR><BR>程序清单5-10 
web.xml（说明JSP页面的init参数的摘录） <BR>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt; 
<BR>&lt;!DOCTYPE web-app <BR>PUBLIC "-//Sun Microsystems, Inc.//DTD Web 
Application 2.3//EN" <BR>"http://java.sun.com/dtd/web-app_2_3.dtd"&gt; 
<BR><BR>&lt;web-app&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;servlet&gt; 
<BR>&lt;servlet-name&gt;InitPage&lt;/servlet-name&gt; 
<BR>&lt;jsp-file&gt;/InitPage.jsp&lt;/jsp-file&gt; <BR>&lt;init-param&gt; 
<BR>&lt;param-name&gt;firstName&lt;/param-name&gt; 
<BR>&lt;param-value&gt;Bill&lt;/param-value&gt; <BR>&lt;/init-param&gt; 
<BR>&lt;init-param&gt; <BR>&lt;param-name&gt;emailAddress&lt;/param-name&gt; 
<BR>&lt;param-value&gt;gates@oracle.com&lt;/param-value&gt; 
<BR>&lt;/init-param&gt; <BR>&lt;/servlet&gt; <BR>&lt;!-- ... --&gt; 
<BR>&lt;servlet-mapping&gt; <BR>&lt;servlet-name&gt; 
InitPage&lt;/servlet-name&gt; 
<BR>&lt;url-pattern&gt;/InitPage.jsp&lt;/url-pattern&gt; 
<BR>&lt;/servlet-mapping&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;/web-app&gt; 
<BR><BR><BR>5.3 提供应用范围内的初始化参数 
<BR>一般，对单个地servlet或JSP页面分配初始化参数。指定的servlet或JSP页面利用ServletConfig的getInitParameter方法读取这些参数。但是，在某些情形下，希望提供可由任意servlet或JSP页面借助ServletContext的getInitParameter方法读取的系统范围内的初始化参数。 
<BR>可利用context-param元素声明这些系统范围内的初始化值。context-param元素应该包含param-name、param-value以及可选的description子元素，如下所示： 
<BR>&lt;context-param&gt; <BR>&lt;param-name&gt;support-email&lt;/param-name&gt; 
<BR>&lt;param-value&gt;blackhole@mycompany.com&lt;/param-value&gt; 
<BR>&lt;/context-param&gt; 
<BR>可回忆一下，为了保证可移植性，web.xml内的元素必须以正确的次序声明。但这里应该注意，context-param元素必须出现任意与文档有关的元素（icon、display-name或description）之后及filter、filter-mapping、listener或servlet元素之前。 
<BR>5.4 在服务器启动时装载servlet 
<BR>假如servlet或JSP页面有一个要花很长时间执行的init（servlet）或jspInit（JSP）方法。例如，假如init或jspInit方法从某个数据库或ResourceBundle查找产量。这种情况下，在第一个客户机请求时装载servlet的缺省行为将对第一个客户机产生较长时间的延迟。因此，可利用servlet的load-on-startup元素规定服务器在第一次启动时装载servlet。下面是一个例子。 
<BR>&lt;servlet&gt; <BR>&lt;servlet-name&gt; … &lt;/servlet-name&gt; 
<BR>&lt;servlet-class&gt; … &lt;/servlet-class&gt; &lt;!-- Or jsp-file --&gt; 
<BR>&lt;load-on-startup/&gt; <BR>&lt;/servlet&gt; 
<BR>可以为此元素体提供一个整数而不是使用一个空的load-on-startup。想法是服务器应该在装载较大数目的servlet或JSP页面之前装载较少数目的servlet或JSP页面。例如，下面的servlet项（放置在Web应用的WEB-INF目录下的web.xml文件中的web-app元素内）将指示服务器首先装载和初始化SearchServlet，然后装载和初始化由位于Web应用的result目录中的index.jsp文件产生的servlet。 
<BR>&lt;servlet&gt; <BR>&lt;servlet-name&gt;Search&lt;/servlet-name&gt; 
<BR>&lt;servlet-class&gt;myPackage.SearchServlet&lt;/servlet-class&gt; &lt;!-- 
Or jsp-file --&gt; <BR>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt; 
<BR>&lt;/servlet&gt; <BR>&lt;servlet&gt; 
<BR>&lt;servlet-name&gt;Results&lt;/servlet-name&gt; 
<BR>&lt;servlet-class&gt;/results/index.jsp&lt;/servlet-class&gt; &lt;!-- Or 
jsp-file --&gt; <BR>&lt;load-on-startup&gt;2&lt;/load-on-startup&gt; 
<BR>&lt;/servlet&gt; <BR><BR>6 声明过滤器 <BR><BR>servlet版本2.3引入了过滤器的概念。虽然所有支持servlet 
API版本2.3的服务器都支持过滤器，但为了使用与过滤器有关的元素，必须在web.xml中使用版本2.3的DTD。 
<BR>过滤器可截取和修改进入一个servlet或JSP页面的请求或从一个servlet或JSP页面发出的相应。在执行一个servlet或JSP页面之前，必须执行第一个相关的过滤器的doFilter方法。在该过滤器对其FilterChain对象调用doFilter时，执行链中的下一个过滤器。如果没有其他过滤器，servlet或JSP页面被执行。过滤器具有对到来的ServletRequest对象的全部访问权，因此，它们可以查看客户机名、查找到来的cookie等。为了访问servlet或JSP页面的输出，过滤器可将响应对象包裹在一个替身对象（stand-in 
object）中，比方说把输出累加到一个缓冲区。在调用FilterChain对象的doFilter方法之后，过滤器可检查缓冲区，如有必要，就对它进行修改，然后传送到客户机。 
<BR>例如，程序清单5-11帝国难以了一个简单的过滤器，只要访问相关的servlet或JSP页面，它就截取请求并在标准输出上打印一个报告（开发过程中在桌面系统上运行时，大多数服务器都可以使用这个过滤器）。 
<BR><BR>程序清单5-11 ReportFilter.java <BR>package moreservlets; <BR><BR>import 
java.io.*; <BR>import javax.servlet.*; <BR>import javax.servlet.http.*; 
<BR>import java.util.*; <BR><BR>/** Simple filter that prints a report on the 
standard output <BR>* whenever the associated servlet or JSP page is accessed. 
<BR>* &lt;P&gt; <BR>* Taken from More Servlets and JavaServer Pages <BR>* from 
Prentice Hall and Sun Microsystems Press, <BR>* http://www.moreservlets.com/. 
<BR>* &amp;copy; 2002 Marty Hall; may be freely used or adapted. <BR>*/ 
<BR><BR>public class ReportFilter implements Filter { <BR>public void 
doFilter(ServletRequest request, <BR>ServletResponse response, <BR>FilterChain 
chain) <BR>throws ServletException, IOException { <BR>HttpServletRequest req = 
(HttpServletRequest)request; <BR>System.out.println(req.getRemoteHost() + <BR>" 
tried to access " + <BR>req.getRequestURL() + <BR>" on " + new Date() + "."); 
<BR>chain.doFilter(request,response); <BR>} <BR><BR>public void 
init(FilterConfig config) <BR>throws ServletException { <BR>} <BR><BR>public 
void destroy() {} <BR>} 
<BR><BR>一旦建立了一个过滤器，可以在web.xml中利用filter元素以及filter-name（任意名称）、file-class（完全限定的类名）和（可选的）init-params子元素声明它。请注意，元素在web.xml的web-app元素中出现的次序不是任意的；允许服务器（但不是必需的）强制所需的次序，并且实际中有些服务器也是这样做的。但这里要注意，所有filter元素必须出现在任意filter-mapping元素之前，filter-mapping元素又必须出现在所有servlet或servlet-mapping元素之前。 
<BR>例如，给定上述的ReportFilter类，可在web.xml中作出下面的filter声明。它把名称Reporter与实际的类ReportFilter（位于moreservlets程序包中）相关联。 
<BR>&lt;filter&gt; <BR>&lt;filter-name&gt;Reporter&lt;/filter-name&gt; 
<BR>&lt;filter-class&gt;moresevlets.ReportFilter&lt;/filter-class&gt; 
<BR>&lt;/filter&gt; 
<BR>一旦命名了一个过滤器，可利用filter-mapping元素把它与一个或多个servlet或JSP页面相关联。关于此项工作有两种选择。 
<BR>首先，可使用filter-name和servlet-name子元素把此过滤器与一个特定的servlet名（此servlet名必须稍后在相同的web.xml文件中使用servlet元素声明）关联。例如，下面的程序片断指示系统只要利用一个定制的URL访问名为SomeServletName的servlet或JSP页面，就运行名为Reporter的过滤器。 
<BR>&lt;filter-mapping&gt; <BR>&lt;filter-name&gt;Reporter&lt;/filter-name&gt; 
<BR>&lt;servlet-name&gt;SomeServletName&lt;/servlet-name&gt; 
<BR>&lt;/filter-mapping&gt; 
<BR>其次，可利用filter-name和url-pattern子元素将过滤器与一组servlet、JSP页面或静态内容相关联。例如，相面的程序片段指示系统只要访问Web应用中的任意URL，就运行名为Reporter的过滤器。 
<BR>&lt;filter-mapping&gt; <BR>&lt;filter-name&gt;Reporter&lt;/filter-name&gt; 
<BR>&lt;url-pattern&gt;/*&lt;/url-pattern&gt; <BR>&lt;/filter-mapping&gt; 
<BR>例如，程序清单5-12给出了将ReportFilter过滤器与名为PageName的servlet相关联的web.xml文件的一部分。名字PageName依次又与一个名为TestPage.jsp的JSP页面以及以模式http://host/webAppPrefix/UrlTest2/ 
开头的URL相关联。TestPage.jsp的源代码已经JSP页面命名的谈论在前面的3节"分配名称和定制的URL"中给出。事实上，程序清单5-12中的servlet和servlet-name项从该节原封不动地拿过来的。给定这些web.xml项，可看到下面的标准输出形式的调试报告（换行是为了容易阅读）。 
<BR>audit.irs.gov tried to access 
<BR>http://mycompany.com/deployDemo/UrlTest2/business/tax-plan.html <BR>on Tue 
Dec 25 13:12:29 EDT 2001. <BR><BR>程序清单5-12 Web.xml（说明filter用法的摘录） <BR>&lt;?xml 
version="1.0" encoding="ISO-8859-1"?&gt; <BR>&lt;!DOCTYPE web-app <BR>PUBLIC 
"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" 
<BR>"http://java.sun.com/dtd/web-app_2_3.dtd"&gt; <BR><BR>&lt;web-app&gt; 
<BR>&lt;filter&gt; <BR>&lt;filter-name&gt;Reporter&lt;/filter-name&gt; 
<BR>&lt;filter-class&gt;moresevlets.ReportFilter&lt;/filter-class&gt; 
<BR>&lt;/filter&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;filter-mapping&gt; 
<BR>&lt;filter-name&gt;Reporter&lt;/filter-name&gt; 
<BR>&lt;servlet-name&gt;PageName&lt;/servlet-name&gt; 
<BR>&lt;/filter-mapping&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;servlet&gt; 
<BR>&lt;servlet-name&gt;PageName&lt;/servlet-name&gt; 
<BR>&lt;jsp-file&gt;/RealPage.jsp&lt;/jsp-file&gt; <BR>&lt;/servlet&gt; 
<BR>&lt;!-- ... --&gt; <BR>&lt;servlet-mapping&gt; <BR>&lt;servlet-name&gt; 
PageName &lt;/servlet-name&gt; 
<BR>&lt;url-pattern&gt;/UrlTest2/*&lt;/url-pattern&gt; 
<BR>&lt;/servlet-mapping&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;/web-app&gt; 
<BR><BR><BR>7 指定欢迎页 <BR><BR>假如用户提供了一个像http://host/webAppPrefix/directoryName/ 
这样的包含一个目录名但没有包含文件名的URL，会发生什么事情呢？用户能得到一个目录表？一个错误？还是标准文件的内容？如果得到标准文件内容，是index.html、index.jsp、default.html、default.htm或别的什么东西呢？ 
<BR>Welcome-file-list元素及其辅助的welcome-file元素解决了这个模糊的问题。例如，下面的web.xml项指出，如果一个URL给出一个目录名但未给出文件名，服务器应该首先试用index.jsp，然后再试用index.html。如果两者都没有找到，则结果有赖于所用的服务器（如一个目录列表）。 
<BR>&lt;welcome-file-list&gt; 
<BR>&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; 
<BR>&lt;welcome-file&gt;index.html&lt;/welcome-file&gt; 
<BR>&lt;/welcome-file-list&gt; 
<BR>虽然许多服务器缺省遵循这种行为，但不一定必须这样。因此，明确地使用welcom-file-list保证可移植性是一种良好的习惯。 <BR><BR>8 
指定处理错误的页面 
<BR><BR>现在我了解到，你在开发servlet和JSP页面时从不会犯错误，而且你的所有页面是那样的清晰，一般的程序员都不会被它们的搞糊涂。但是，是人总会犯错误的，用户可能会提供不合规定的参数，使用不正确的URL或者不能提供必需的表单字段值。除此之外，其它开发人员可能不那么细心，他们应该有些工具来克服自己的不足。 
<BR>error-page元素就是用来克服这些问题的。它有两个可能的子元素，分别是：error-code和exception-type。第一个子元素error-code指出在给定的HTTP错误代码出现时使用的URL。第二个子元素excpetion-type指出在出现某个给定的Java异常但未捕捉到时使用的URL。error-code和exception-type都利用location元素指出相应的URL。此URL必须以/开始。location所指出的位置处的页面可通过查找HttpServletRequest对象的两个专门的属性来访问关于错误的信息，这两个属性分别是：javax.servlet.error.status_code和javax.servlet.error.message。 
<BR>可回忆一下，在web.xml内以正确的次序声明web-app的子元素很重要。这里只要记住，error-page出现在web.xml文件的末尾附近，servlet、servlet-name和welcome-file-list之后即可。 
<BR><BR>8.1 error-code元素 
<BR>为了更好地了解error-code元素的值，可考虑一下如果不正确地输入文件名，大多数站点会作出什么反映。这样做一般会出现一个404错误信息，它表示不能找到该文件，但几乎没提供更多有用的信息。另一方面，可以试一下在www.microsoft.com、www.ibm.com 
处或者特别是在www.bea.com 
处输出未知的文件名。这是会得出有用的消息，这些消息提供可选择的位置，以便查找感兴趣的页面。提供这样有用的错误页面对于Web应用来说是很有价值得。事实上rm-error-page子元素）。由form-login-page给出的HTML表单必须具有一个j_security_check的ACTION属性、一个名为j_username的用户名文本字段以及一个名为j_password的口令字段。 
<BR>例如，程序清单5-19指示服务器使用基于表单的验证。Web应用的顶层目录中的一个名为login.jsp的页面将收集用户名和口令，并且失败的登陆将由相同目录中名为login-error.jsp的页面报告。 
<BR><BR>程序清单5-19 web.xml（说明login-config的摘录） <BR>&lt;?xml version="1.0" 
encoding="ISO-8859-1"?&gt; <BR>&lt;!DOCTYPE web-app <BR>PUBLIC "-//Sun 
Microsystems, Inc.//DTD Web Application 2.3//EN" 
<BR>"http://java.sun.com/dtd/web-app_2_3.dtd"&gt; <BR><BR>&lt;web-app&gt; 
<BR>&lt;!-- ... --&gt; <BR>&lt;security-constraint&gt; ... 
&lt;/security-constraint&gt; <BR>&lt;login-config&gt; <BR>&lt;auth-method&gt; 
FORM &lt;/auth-method&gt; <BR>&lt;form-login-config&gt; 
<BR>&lt;form-login-page&gt;/login.jsp&lt;/form-login-page&gt; 
<BR>&lt;form-error-page&gt;/login-error.jsp&lt;/form-error-page&gt; 
<BR>&lt;/form-login-config&gt; <BR>&lt;/login-config&gt; <BR>&lt;!-- ... --&gt; 
<BR>&lt;/web-app&gt; <BR><BR><BR>9.2 限制对Web资源的访问 
<BR>现在，可以指示服务器使用何种验证方法了。"了不起，"你说道，"除非我能指定一个来收到保护的URL，否则没有多大用处。"没错。指出这些URL并说明他们应该得到何种保护正是security-constriaint元素的用途。此元素在web.xml中应该出现在login-config的紧前面。它包含是个可能的子元素，分别是：web-resource-collection、auth-constraint、user-data-constraint和display-name。下面各小节对它们进行介绍。 
<BR>l web-resource-collection 
<BR>此元素确定应该保护的资源。所有security-constraint元素都必须包含至少一个web-resource-collection项。此元素由一个给出任意标识名称的web-resource-name元素、一个确定应该保护的URL的url-pattern元素、一个指出此保护所适用的HTTP命令（GET、POST等，缺省为所有方法）的http-method元素和一个提供资料的可选description元素组成。例如，下面的Web-resource-collection项（在security-constratint元素内）指出Web应用的proprietary目录中所有文档应该受到保护。 
<BR>&lt;security-constraint&gt; <BR>&lt;web-resource-coolection&gt; 
<BR>&lt;web-resource-name&gt;Proprietary&lt;/web-resource-name&gt; 
<BR>&lt;url-pattern&gt;/propritary/*&lt;/url-pattern&gt; 
<BR>&lt;/web-resource-coolection&gt; <BR>&lt;!-- ... --&gt; 
<BR>&lt;/security-constraint&gt; 
<BR>重要的是应该注意到，url-pattern仅适用于直接访问这些资源的客户机。特别是，它不适合于通过MVC体系结构利用RequestDispatcher来访问的页面，或者不适合于利用类似jsp:forward的手段来访问的页面。这种不匀称如果利用得当的话很有好处。例如，servlet可利用MVC体系结构查找数据，把它放到bean中，发送请求到从bean中提取数据的JSP页面并显示它。我们希望保证决不直接访问受保护的JSP页面，而只是通过建立该页面将使用的bean的servlet来访问它。url-pattern和auth-contraint元素可通过声明不允许任何用户直接访问JSP页面来提供这种保证。但是，这种不匀称的行为可能让开发人员放松警惕，使他们偶然对应受保护的资源提供不受限制的访问。 
<BR>l auth-constraint 
<BR>尽管web-resource-collention元素质出了哪些URL应该受到保护，但是auth-constraint元素却指出哪些用户应该具有受保护资源的访问权。此元素应该包含一个或多个标识具有访问权限的用户类别role-name元素，以及包含（可选）一个描述角色的description元素。例如，下面web.xml中的security-constraint元素部门规定只有指定为Administrator或Big 
Kahuna（或两者）的用户具有指定资源的访问权。 <BR>&lt;security-constraint&gt; 
<BR>&lt;web-resource-coolection&gt; ... &lt;/web-resource-coolection&gt; 
<BR>&lt;auth-constraint&gt; <BR>&lt;role-name&gt;administrator&lt;/role-name&gt; 
<BR>&lt;role-name&gt;kahuna&lt;/role-name&gt; <BR>&lt;/auth-constraint&gt; 
<BR>&lt;/security-constraint&gt; 
<BR>重要的是认识到，到此为止，这个过程的可移植部分结束了。服务器怎样确定哪些用户处于任何角色以及它怎样存放用户的口令，完全有赖于具体的系统。 
<BR>例如，Tomcat使用install_dir/conf/tomcat-users.xml将用户名与角色名和口令相关联，正如下面例子中所示，它指出用户joe（口令bigshot）和jane（口令enaj）属于administrator和kahuna角色。 
<BR>&lt;tomcat-users&gt; <BR>&lt;user name="joe" password="bigshot" 
roles="administrator,kahuna" /&gt; <BR>&lt;user name="jane" password="enaj" 
roles="kahuna" /&gt; <BR>&lt;/tomcat-users&gt; <BR>l user-data-constraint 
<BR>这个可选的元素指出在访问相关资源时使用任何传输层保护。它必须包含一个transport-guarantee子元素（合法值为NONE、INTEGRAL或CONFIDENTIAL），并且可选地包含一个description元素。transport-guarantee为NONE值将对所用的通讯协议不加限制。INTEGRAL值表示数据必须以一种防止截取它的人阅读它的方式传送。虽然原理上（并且在未来的HTTP版本中），在INTEGRAL和CONFIDENTIAL之间可能会有差别，但在当前实践中，他们都只是简单地要求用SSL。例如，下面指示服务器只允许对相关资源做HTTPS连接： 
<BR>&lt;security-constraint&gt; <BR>&lt;!-- ... --&gt; 
<BR>&lt;user-data-constraint&gt; 
<BR>&lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt; 
<BR>&lt;/user-data-constraint&gt; <BR>&lt;/security-constraint&gt; <BR>l 
display-name <BR>security-constraint的这个很少使用的子元素给予可能由GUI工具使用的安全约束项一个名称。 <BR>9.3 
分配角色名 <BR>迄今为止，讨论已经集中到完全由容器（服务器）处理的安全问题之上了。但servlet以及JSP页面也能够处理它们自己的安全问题。 
<BR>例如，容器可能允许用户从bigwig或bigcheese角色访问一个显示主管人员额外紧贴的页面，但只允许bigwig用户修改此页面的参数。完成这种更细致的控制的一种常见方法是调用HttpServletRequset的isUserInRole方法，并据此修改访问。 
<BR>Servlet的security-role-ref子元素提供出现在服务器专用口令文件中的安全角色名的一个别名。例如，假如编写了一个调用request.isUserInRole（"boss"）的servlet，但后来该servlet被用在了一个其口令文件调用角色manager而不是boss的服务器中。下面的程序段使该servlet能够使用这两个名称中的任何一个。 
<BR>&lt;servlet&gt; <BR>&lt;!-- ... --&gt; <BR>&lt;security-role-ref&gt; 
<BR>&lt;role-name&gt;boss&lt;/role-name&gt; &lt;!-- New alias --&gt; 
<BR>&lt;role-link&gt;manager&lt;/role-link&gt; &lt;!-- Real name --&gt; 
<BR>&lt;/security-role-ref&gt; <BR>&lt;/servlet&gt; 
<BR>也可以在web-app内利用security-role元素提供将出现在role-name元素中的所有安全角色的一个全局列表。分别地生命角色使高级IDE容易处理安全信息。 
<BR><BR>10 控制会话超时 
<BR><BR>如果某个会话在一定的时间内未被访问，服务器可把它扔掉以节约内存。可利用HttpSession的setMaxInactiveInterval方法直接设置个别会话对象的超时值。如果不采用这种方法，则缺省的超时值由具体的服务器决定。但可利用session-config和session-timeout元素来给出一个适用于所有服务器的明确的超时值。超时值的单位为分钟，因此，下面的例子设置缺省会话超时值为三个小时（180分钟）。 
<BR>&lt;session-config&gt; 
<BR>&lt;session-timeout&gt;180&lt;/session-timeout&gt; 
<BR>&lt;/session-config&gt; <BR><BR>11 Web应用的文档化 
<BR><BR>越来越多的开发环境开始提供servlet和JSP的直接支持。例子有Borland Jbuilder Enterprise 
Edition、Macromedia UltraDev、Allaire JRun Studio（写此文时，已被Macromedia收购）以及IBM 
VisuaAge for Java等。 
<BR>大量的web.xml元素不仅是为服务器设计的，而且还是为可视开发环境设计的。它们包括icon、display-name和discription等。 
<BR>可回忆一下，在web.xml内以适当地次序声明web-app子元素很重要。不过，这里只要记住icon、display-name和description是web.xml的web-app元素内的前三个合法元素即可。 
<BR>l icon <BR>icon元素指出GUI工具可用来代表Web应用的一个和两个图像文件。可利用small-icon元素指定一幅16 x 
16的GIF或JPEG图像，用large-icon元素指定一幅32 x 32的图像。下面举一个例子： <BR>&lt;icon&gt; 
<BR>&lt;small-icon&gt;/images/small-book.gif&lt;/small-icon&gt; 
<BR>&lt;large-icon&gt;/images/tome.jpg&lt;/large-icon&gt; <BR>&lt;/icon&gt; 
<BR>l display-name <BR>display-name元素提供GUI工具可能会用来标记此Web应用的一个名称。下面是个例子。 
<BR>&lt;display-name&gt;Rare Books&lt;/display-name&gt; <BR>l description 
<BR>description元素提供解释性文本，如下所示： <BR>&lt;description&gt; <BR>This Web application 
represents the store developed for <BR>rare-books.com, an online bookstore 
specializing in rare <BR>and limited-edition books. <BR>&lt;/description&gt; 
<BR><BR>12 关联文件与MIME类型 
<BR><BR>服务器一般都具有一种让Web站点管理员将文件扩展名与媒体相关联的方法。例如，将会自动给予名为mom.jpg的文件一个image/jpeg的MIME类型。但是，假如你的Web应用具有几个不寻常的文件，你希望保证它们在发送到客户机时分配为某种MIME类型。mime-mapping元素（具有extension和mime-type子元素）可提供这种保证。例如，下面的代码指示服务器将application/x-fubar的MIME类型分配给所有以.foo结尾的文件。 
<BR>&lt;mime-mapping&gt; <BR>&lt;extension&gt;foo&lt;/extension&gt; 
<BR>&lt;mime-type&gt;application/x-fubar&lt;/mime-type&gt; 
<BR>&lt;/mime-mapping&gt; 
<BR>或许，你的Web应用希望重载（override）标准的映射。例如，下面的代码将告诉服务器在发送到客户机时指定.ps文件作为纯文本（text/plain）而不是作为PostScript（application/postscript）。 
<BR>&lt;mime-mapping&gt; <BR>&lt;extension&gt;ps&lt;/extension&gt; 
<BR>&lt;mime-type&gt;application/postscript&lt;/mime-type&gt; 
<BR>&lt;/mime-mapping&gt; <BR><BR><BR>13 定位TLD <BR><BR>JSP 
taglib元素具有一个必要的uri属性，它给出一个TLD（Tag Library 
Descriptor）文件相对于Web应用的根的位置。TLD文件的实际名称在发布新的标签库版本时可能会改变，但我们希望避免更改所有现有JSP页面。此外，可能还希望使用保持taglib元素的简练性的一个简短的uri。这就是部署描述符文件的taglib元素派用场的所在了。Taglib包含两个子元素：taglib-uri和taglib-location。taglib-uri元素应该与用于JSP 
taglib元素的uri属性的东西相匹配。Taglib-location元素给出TLD文件的实际位置。例如，假如你将文件chart-tags-1.3beta.tld放在WebApp/WEB-INF/tlds中。现在，假如web.xml在web-app元素内包含下列内容。 
<BR>&lt;taglib&gt; <BR>&lt;taglib-uri&gt;/charts.tld&lt;/taglib-uri&gt; 
<BR>&lt;taglib-location&gt; <BR>/WEB-INF/tlds/chart-tags-1.3beta.tld 
<BR>&lt;/taglib-location&gt; <BR>&lt;/taglib&gt; 
<BR>给出这个说明后，JSP页面可通过下面的简化形式使用标签库。 <BR>&lt;%@ taglib uri="/charts.tld" 
prefix="somePrefix" %&gt; <BR><BR>14 指定应用事件监听程序 
<BR><BR>应用事件监听器程序是建立或修改servlet环境或会话对象时通知的类。它们是servlet规范的版本2.3中的新内容。这里只简单地说明用来向Web应用注册一个监听程序的web.xml的用法。 
<BR>注册一个监听程序涉及在web.xml的web-app元素内放置一个listener元素。在listener元素内，listener-class元素列出监听程序的完整的限定类名，如下所示： 
<BR>&lt;listener&gt; 
<BR>&lt;listener-class&gt;package.ListenerClass&lt;/listener-class&gt; 
<BR>&lt;/listener&gt; 
<BR>虽然listener元素的结构很简单，但请不要忘记，必须正确地给出web-app元素内的子元素的次序。listener元素位于所有的servlet元素之前以及所有filter-mapping元素之后。此外，因为应用生存期监听程序是serlvet规范的2.3版本中的新内容，所以必须使用web.xml 
DTD的2.3版本，而不是2.2版本。 
<BR>例如，程序清单5-20给出一个名为ContextReporter的简单的监听程序，只要Web应用的Servlet-Context建立（如装载Web应用）或消除（如服务器关闭）时，它就在标准输出上显示一条消息。程序清单5-21给出此监听程序注册所需要的web.xml文件的一部分。 
<BR><BR>程序清单5-20 ContextReporterjava <BR>package moreservlets; <BR><BR>import 
javax.servlet.*; <BR>import java.util.*; <BR><BR>/** Simple listener that prints 
a report on the standard output <BR>* when the ServletContext is created or 
destroyed. <BR>* &lt;P&gt; <BR>* Taken from More Servlets and JavaServer Pages 
<BR>* from Prentice Hall and Sun Microsystems Press, <BR>* 
http://www.moreservlets.com/. <BR>* &amp;copy; 2002 Marty Hall; may be freely 
used or adapted. <BR>*/ <BR><BR>public class ContextReporter implements 
ServletContextListener { <BR>public void contextInitialized(ServletContextEvent 
event) { <BR>System.out.println("Context created on " + <BR>new Date() + "."); 
<BR>} <BR><BR>public void contextDestroyed(ServletContextEvent event) { 
<BR>System.out.println("Context destroyed on " + <BR>new Date() + "."); <BR>} 
<BR>} <BR><BR><BR>程序清单5-21 web.xml（声明一个监听程序的摘录） <BR>&lt;?xml version="1.0" 
encoding="ISO-8859-1"?&gt; <BR>&lt;!DOCTYPE web-app <BR>PUBLIC "-//Sun 
Microsystems, Inc.//DTD Web Application 2.3//EN" 
<BR>"http://java.sun.com/dtd/web-app_2_3.dtd"&gt; <BR><BR>&lt;web-app&gt; 
<BR>&lt;!-- ... --&gt; <BR>&lt;filter-mapping&gt; … &lt;/filter-mapping&gt; 
<BR>&lt;listener&gt; 
<BR>&lt;listener-class&gt;package.ListenerClass&lt;/listener-class&gt; 
<BR>&lt;/listener&gt; <BR>&lt;servlet&gt; ... &lt;/servlet&gt; <BR>&lt;!-- ... 
--&gt; <BR>&lt;/web-app&gt; <BR><BR><BR>15 J2EE元素 
<BR><BR>本节描述用作J2EE环境组成部分的Web应用的web.xml元素。这里将提供一个简明的介绍，详细内容可以参阅http://java.sun.com/j2ee/j2ee-1_3-fr-spec.pdf的Java 
2 Plantform Enterprise Edition版本1.3规范的第5章。 <BR>l distributable 
<BR>distributable元素指出，Web应用是以这样的方式编程的：即，支持集群的服务器可安全地在多个服务器上分布Web应用。例如，一个可分布的应用必须只使用Serializable对象作为其HttpSession对象的属性，而且必须避免用实例变量（字段）来实现持续性。distributable元素直接出现在discription元素之后，并且不包含子元素或数据，它只是一个如下的标志。 
<BR>&lt;distributable /&gt; <BR>l resource-env-ref 
<BR>resource-env-ref元素声明一个与某个资源有关的管理对象。此元素由一个可选的description元素、一个resource-env-ref-name元素（一个相对于java:comp/env环境的JNDI名）以及一个resource-env-type元素（指定资源类型的完全限定的类），如下所示： 
<BR>&lt;resource-env-ref&gt; <BR>&lt;resource-env-ref-name&gt; 
<BR>jms/StockQueue <BR>&lt;/resource-env-ref-name&gt; 
<BR>&lt;resource-env-ref-type&gt; <BR>javax.jms.Queue 
<BR>&lt;/resource-env-ref-type&gt; <BR>&lt;/resource-env-ref&gt; <BR>l env-entry 
<BR>env-entry元素声明Web应用的环境项。它由一个可选的description元素、一个env-entry-name元素（一个相对于java:comp/env环境JNDI名）、一个env-entry-value元素（项值）以及一个env-entry-type元素（java.lang程序包中一个类型的完全限定类名，java.lang.Boolean、java.lang.String等）组成。下面是一个例子： 
<BR>&lt;env-entry&gt; <BR>&lt;env-entry-name&gt;minAmout&lt;/env-entry-name&gt; 
<BR>&lt;env-entry-value&gt;100.00&lt;/env-entry-value&gt; 
<BR>&lt;env-entry-type&gt;minAmout&lt;/env-entry-type&gt; <BR>&lt;/env-entry&gt; 
<BR>l ejb-ref 
<BR>ejb-ref元素声明对一个EJB的主目录的应用。它由一个可选的description元素、一个ejb-ref-name元素（相对于java:comp/env的EJB应用）、一个ejb-ref-type元素（bean的类型，Entity或Session）、一个home元素（bean的主目录接口的完全限定名）、一个remote元素（bean的远程接口的完全限定名）以及一个可选的ejb-link元素（当前bean链接的另一个bean的名称）组成。 
<BR>l ejb-local-ref 
<BR>ejb-local-ref元素声明一个EJB的本地主目录的引用。除了用local-home代替home外，此元素具有与ejb-ref元素相同的属性并以相同的方式使用。 
<BR><BR>http://blog.csdn.net/heycao/article/details/4391792 <BR></DIV><IFRAME 
height=90 src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/187.htm" 
frameBorder=0 width=680 scrolling=no></IFRAME>
<DIV id=bottoms class=clearfix>
<DIV id=share_weibo>分享到： <A title=分享到新浪微博 href="javascript:;" 
data-type="sina"><IMG 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/sina.jpg"></A> <A 
title=分享到腾讯微博 href="javascript:;" data-type="qq"><IMG 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/tec.jpg"></A> </DIV></DIV>
<DIV class=blog_nav>
<DIV class=pre_next><A class=next title="获取当前访问客户端的真实IP地址（含内网地址）  " 
href="http://01121264-163-com.iteye.com/blog/1558950">获取当前访问客户端的真实IP地址（含内网地 
...</A> | <A class=pre title="AOP 来记录每个方法的执行时间 " 
href="http://01121264-163-com.iteye.com/blog/1522659">AOP 来记录每个方法的执行时间 
</A></DIV></DIV>
<DIV class=blog_bottom>
<UL>
  <LI>2012-05-15 11:42</LI>
  <LI>浏览 86367</LI>
  <LI><A 
  href="http://01121264-163-com.iteye.com/blog/1530063#comments">评论(0)</A></LI>
  <LI>分类:<A href="http://www.iteye.com/blogs/category/web">Web前端</A></LI>
  <LI class=last><A class=more href="http://www.iteye.com/wiki/blog/1530063" 
  target=_blank>相关推荐</A></LI></UL></DIV>
<DIV class=blog_comment>
<H5>评论</H5><A id=comments name=comments></A></DIV>
<DIV class=blog_comment>
<H5>发表评论</H5>
<P style="TEXT-ALIGN: center; MARGIN-TOP: 30px; MARGIN-BOTTOM: 0px"><A 
style="BACKGROUND-COLOR: white" 
href="http://01121264-163-com.iteye.com/login"><IMG 
style="VERTICAL-ALIGN: middle; MARGIN-RIGHT: 10px" 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/login_icon.png"></A><A 
href="http://01121264-163-com.iteye.com/login"> 您还没有登录,请您登录后再发表评论 
</A></P></DIV></DIV>
<SCRIPT type=text/javascript>
  dp.SyntaxHighlighter.HighlightAll('code', true, true);

  $$('#main .blog_content pre[name=code]').each(function(pre, index){ // blog content
    var post_id = 1530063;
    var location = window.location;
    source_url = location.protocol + "//" + location.host + location.pathname + location.search;
    pre.writeAttribute('codeable_id', post_id);
    pre.writeAttribute('codeable_type', "Blog");
    pre.writeAttribute('source_url', source_url);
    pre.writeAttribute('pre_index', index);
    pre.writeAttribute('title', 'Servlet中Web.xml的配置详解');
  });

  fix_image_size($$('div.blog_content img'), 700);

  function processComment() {
    $$('#main .blog_comment > div').each(function(comment){// comment
      var post_id = comment.id.substr(2);
      $$("#"+comment.id+" pre[name=code]").each(function(pre, index){
        var location = window.location;
        source_url = location.protocol + "//" + location.host + location.pathname + location.search;
        source_url += "#" + comment.id;
        pre.writeAttribute('codeable_id', post_id);
        pre.writeAttribute('codeable_type', "BlogComment");
        pre.writeAttribute('source_url', source_url);
        pre.writeAttribute('pre_index', index);
        pre.writeAttribute('title', 'Servlet中Web.xml的配置详解');
      });
    });
  }

  function quote_comment(id) {
    new Ajax.Request('/editor/quote', {
      parameters: {'id':id, 'type':'BlogComment'},
      onSuccess:function(response){editor.bbcode_editor.textarea.insertAfterSelection(response.responseText);
        Element.scrollTo(editor.bbcode_editor.textarea.element);}
    });
  }

  code_favorites_init();
  processComment();
  new WeiboShare({share_buttons: $('share_weibo'), img_scope: $('blog_content')});
</SCRIPT>
</DIV>
<DIV id=local>
<DIV class=local_top></DIV>
<DIV id=blog_owner>
<DIV id=blog_owner_logo><A href="http://01121264-163-com.iteye.com/"><IMG 
class=logo title="伊然01的博客: " alt=伊然01的博客 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/b1b300c1-9b54-3117-9331-3b25eda890c0.jpg" 
width=1></A></DIV>
<DIV id=blog_owner_name>伊然01</DIV></DIV>
<DIV id=blog_actions>
<UL>
  <LI>浏览: 130257 次</LI>
  <LI>性别: <IMG title=男 alt=Icon_minigender_1 
  src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/icon_minigender_1.gif"></LI>
  <LI>来自: 南京</LI>
  <LI><IMG 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/offline.gif"></LI></UL></DIV>
<DIV id=user_visits class=clearfix>
<H5>最近访客 <SPAN 
style="PADDING-LEFT: 30px; FONT-SIZE: 12px; FONT-WEIGHT: normal"><A 
href="http://01121264-163-com.iteye.com/blog/user_visits">更多访客&gt;&gt;</A></SPAN></H5>
<DIV class=user_visit>
<DIV class=logo><A href="http://951116853.iteye.com/" target=_blank><IMG 
class=logo title="951116853的博客: " alt=951116853的博客 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/user-logo-thumb.gif" 
width=48></A></DIV>
<DIV class=left><A title=951116853 href="http://951116853.iteye.com/" 
target=_blank>951116853</A></DIV></DIV>
<DIV class=user_visit>
<DIV class=logo><A href="http://dazhi4java.iteye.com/" target=_blank><IMG 
class=logo title="dazhi2010的博客: 大志的工作学习笔记" alt=dazhi2010的博客 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/16dacf32-c0a4-38a7-8040-fed48b6f3d70-thumb.png" 
width=48></A></DIV>
<DIV class=left><A title=dazhi2010 href="http://dazhi4java.iteye.com/" 
target=_blank>dazhi2010</A></DIV></DIV>
<DIV class=user_visit>
<DIV class=logo><A href="http://houlai8863.iteye.com/" target=_blank><IMG 
class=logo title="houlai8863的博客: " alt=houlai8863的博客 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/user-logo-thumb.gif" 
width=48></A></DIV>
<DIV class=left><A title=houlai8863 href="http://houlai8863.iteye.com/" 
target=_blank>houlai8863</A></DIV></DIV>
<DIV class=user_visit>
<DIV class=logo><A href="http://gongzhuqifei.iteye.com/" target=_blank><IMG 
class=logo title="gongzhuqifei的博客: " alt=gongzhuqifei的博客 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/user-logo-thumb.gif" 
width=48></A></DIV>
<DIV class=left><A title=gongzhuqifei href="http://gongzhuqifei.iteye.com/" 
target=_blank>gongzhuqifei</A></DIV></DIV></DIV>
<DIV id=blog_menu>
<H5>文章分类</H5>
<UL>
  <LI><A href="http://01121264-163-com.iteye.com/">全部博客 (38)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/152884">spring 
  (6)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/152885">struts2 
  (1)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/152886">hibernate 
  (1)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/152888">linux 
  (2)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/152887">jsp 
  (5)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/152889">xml 
  (2)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/152890">Jquery 
  (1)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/152891">Java 
  (9)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/152892">oracle,mysql 
  (4)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/246560">eclipse 使用 
  (1)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/267615">oracle 
  (4)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/267616">mysql 
  (3)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/273554">javascript 
  (0)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/292187">其他 
(1)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/293141">hadoop 
  (1)</A></LI>
  <LI><A href="http://01121264-163-com.iteye.com/category/318754">webservice-cxf 
  (1)</A></LI></UL></DIV>
<DIV id=month_blogs>
<H5>社区版块</H5>
<UL>
  <LI><A href="http://01121264-163-com.iteye.com/blog/news">我的资讯</A> (0)</LI>
  <LI><A href="http://01121264-163-com.iteye.com/blog/post">我的论坛</A> (1) </LI>
  <LI><A 
  href="http://01121264-163-com.iteye.com/blog/answered_problems">我的问答</A> 
  (0)</LI></UL></DIV>
<DIV id=month_blogs>
<H5>存档分类</H5>
<UL>
  <LI><A 
  href="http://01121264-163-com.iteye.com/blog/monthblog/2015-10">2015-10</A> 
  (1)</LI>
  <LI><A 
  href="http://01121264-163-com.iteye.com/blog/monthblog/2015-08">2015-08</A> 
  (1)</LI>
  <LI><A 
  href="http://01121264-163-com.iteye.com/blog/monthblog/2014-07">2014-07</A> 
  (1)</LI>
  <LI><A 
  href="http://01121264-163-com.iteye.com/blog/monthblog_more">更多存档...</A></LI></UL></DIV>
<DIV id=guest_books>
<H5>最新评论</H5>
<UL>
  <LI><A title=it_like href="http://it-like.iteye.com/" 
  target=_blank>it_like</A>： 请问：x-forwarded-for 是什么时候加入HTTP头 ...<BR><A 
  href="http://01121264-163-com.iteye.com/blog/1558950#bc2323549">获取当前访问客户端的真实IP地址（含内网地址） 
  </A></LI>
  <LI><A title=bluend1004 href="http://bluend1004.iteye.com/" 
  target=_blank>bluend1004</A>： mark下~~~谢谢分享喽~~<BR><A 
  href="http://01121264-163-com.iteye.com/blog/1062047#bc2225300">PL/SQL快捷键设置</A> 
  </LI>
  <LI><A title=hastune href="http://hastune.iteye.com/" 
  target=_blank>hastune</A>： 统计一下典型就好了比如取得map的值${user.values ...<BR><A 
  href="http://01121264-163-com.iteye.com/blog/1007140#bc2058847">EL表达式 EL 
  </A></LI></UL></DIV>
<DIV class=local_bottom></DIV></DIV></DIV>
<DIV id=footer class=clearfix>
<DIV id=copyright>
<HR>
声明：ITeye文章版权属于作者，受法律保护。没有作者书面许可不得转载。若作者同意转载，必须以超链接形式标明文章原始出处和作者。<BR>© 2003-2015 
ITeye.com. All rights reserved. [ 京ICP证110151号 京公网安备110105010620 ] 
</DIV></DIV></DIV>
<SCRIPT type=text/javascript>
  document.write("<img src='http://stat.iteye.com/?url="+ encodeURIComponent(document.location.href) + "&referrer=" + encodeURIComponent(document.referrer) + "&user_id=' width='0' height='0' />");
</SCRIPT>

<SCRIPT type=text/javascript 
src="Servlet中Web_xml的配置详解%20-%20-%20ITeye技术网站_files/tracking.js"></SCRIPT>
</BODY></HTML>
