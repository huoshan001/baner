<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0044)http://www.apihome.cn/api/java/KeyStore.html -->
<HTML xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>java_KeyStore_API之家,最大的中文API社区</TITLE>
<META content="text/html; charset=utf-8" http-equiv=Content-Type>
<META name=keywords content="java KeyStore">
<META name=description 
content="java KeyStore用法，java KeyStore如何使用，java KeyStore手册，java KeyStore帮助，java KeyStore例子，java KeyStore示例，java KeyStore案例"><LINK 
rel="shortcut icon" href="/favicon.ico"><LINK rel=stylesheet type=text/css 
href="java_KeyStore_API之家,最大的中文API社区_files/style.css"><LINK rel=stylesheet 
type=text/css href="java_KeyStore_API之家,最大的中文API社区_files/dtree.css">
<SCRIPT type=text/javascript 
src="java_KeyStore_API之家,最大的中文API社区_files/%7B%7D.htm"></SCRIPT>

<SCRIPT type=text/javascript 
src="java_KeyStore_API之家,最大的中文API社区_files/dtree.js"></SCRIPT>

<SCRIPT type=text/javascript 
src="java_KeyStore_API之家,最大的中文API社区_files/common.js"></SCRIPT>

<SCRIPT type=text/javascript 
src="java_KeyStore_API之家,最大的中文API社区_files/jquery.js"></SCRIPT>

<SCRIPT type=text/javascript>
        var realH = 0;
        var isexp = false;
        var initTree=false;
        $(function () {
            Array            $(".dtree").html(d);
            realH = $(".treediv").height();
            
            $(".treediv").css("height", 500);
            $("#expall").bind("click", function () {
                if (!isexp) {
                    $(".treediv").css("height", 500);                     
                    isexp = true;
                    DevelopAll();
                    $(this).text("悬浮目录");
                    $(".treediv").css("position", "absolute");
                } else {
                   
                    isexp = false;
                    $(this).text("固定目录");
                    $(".treediv").css("position", "fixed");
                }

            });
        })         
    </SCRIPT>
<LINK rel=stylesheet type=text/css 
href="{/ewcsjs/css/B4467012E04E07FA51F2D6686F1D4687.css}">
<META name=GENERATOR content="MSHTML 8.00.7601.17622"></HEAD>
<BODY>
<SCRIPT type=text/javascript>

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38056524-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</SCRIPT>

<DIV id=top>
<DIV class=topnav>
<UL>
  <LI>API之家----您的程序好帮手！</LI></UL><SPAN class=navright><A 
onclick="this.style.behavior='url(#default#homepage)';this.setHomePage('http://www.apihome.cn');" 
href="javascript:void(0);">设为首页</A> | <A 
onclick="javascript:window.external.AddFavorite('http://www.apihome.cn', 'api之家--最大的中文api社区')" 
href="javascript:void(0);">收藏本站</A></SPAN> 
<DIV class=clearBoth></DIV></DIV>
<DIV class=logo><A href="http://www.apihome.cn/"><IMG alt=API之家 
src="java_KeyStore_API之家,最大的中文API社区_files/logo.gif"></A></DIV>
<DIV class=topright>
<UL>
  <LI><A href="http://www.apihome.cn/api/c/">C语言</A></LI>
  <LI><A href="http://www.apihome.cn/api/java/">JAVA</A></LI>
  <LI><A href="http://www.apihome.cn/api/hibernate/">Hibernate</A></LI>
  <LI><A href="http://www.apihome.cn/api/lua/">Lua</A></LI>
  <LI><A href="http://www.apihome.cn/api/html5/">HTML5</A> </LI>
  <LI><A href="http://www.apihome.cn/api/css3/">CSS3</A></LI>
  <LI><A href="http://www.apihome.cn/api/javascript/">Javascript</A></LI>
  <LI><A href="http://www.apihome.cn/api/unity3d/">Unity3d</A></LI>
  <LI><A href="http://www.apihome.cn/api/php/">PHP</A></LI>
  <LI><A href="http://www.apihome.cn/api/taobao/">淘宝</A></LI>
  <LI><A href="http://www.apihome.cn/api/tencent/">腾讯</A></LI>
  <LI><A href="http://www.apihome.cn/api/sina/">新浪</A></LI>
  <LI><A href="http://www.apihome.cn/api/hadoop/">Hadoop</A></LI>
  <LI><A href="http://www.apihome.cn/api/lucene/">Lucene</A> </LI>
  <LI><A href="http://www.apihome.cn/api/nginx/">Nginx</A></LI>
  <LI><A href="http://www.apihome.cn/api/memcached/">Memcached</A></LI>
  <LI><A href="http://www.apihome.cn/api/mfc/">mfc</A></LI>
  <LI><A href="http://www.apihome.cn/api/plc/">PLC</A></LI>
  <LI><A href="http://www.apihome.cn/api/cocos2d/">cocos2d</A></LI>
  <LI><A href="http://www.apihome.cn/api/win32sdk/">Win32 SDK</A></LI>
  <LI><A href="http://www.apihome.cn/api/linux/">Unix/Linux </A></LI>
  <LI><A href="http://www.apihome.cn/api/shell/">Bash Shell</A></LI>
  <LI><A href="http://www.apihome.cn/api/oracle/">Oracle</A></LI>
  <LI><A href="http://www.apihome.cn/api/mysql/">Mysql</A></LI></UL></DIV>
<DIV class=clearBoth></DIV></DIV>
<DIV id=menu>
<DIV class=menucontent>
<UL class=menuleft>
  <LI><A href="http://www.apihome.cn/">首页</A></LI>
  <LI><A href="http://www.apihome.cn/api/android/">Android API</A></LI>
  <LI><A href="http://www.apihome.cn/api/html5/"><SPAN>HTML5</SPAN></A></LI></UL>
<UL class=menuright>
  <LI><A href="http://www.apihome.cn/api/android/">android</A></LI>
  <LI>|</LI>
  <LI><A href="http://www.apihome.cn/api/java/">java</A></LI>
  <LI>|</LI>
  <LI><A href="http://www.apihome.cn/api/php/">php</A></LI>
  <LI>|</LI>
  <LI>
  <FORM id=formSch method=get action=/search><INPUT 
  style="WIDTH: 200px; HEIGHT: 25px" id=keyword type=text name=keyword 
  placeholder="请输入搜索关键字">&nbsp;&nbsp;&nbsp;&nbsp;<INPUT style="HEIGHT: 25px" id=btnSub value="  搜　索　" type=submit></FORM></LI></UL>
<DIV class=clearBoth></DIV></DIV></DIV>
<DIV id=mainpage>
<DIV class=treediv><SPAN 
style="POSITION: relative; PADDING-BOTTOM: 4px; BACKGROUND-COLOR: #ddd; PADDING-LEFT: 4px; PADDING-RIGHT: 4px; FLOAT: right; CURSOR: pointer; FONT-WEIGHT: bold; PADDING-TOP: 4px" 
id=expall>点击此处展开整个目录树</SPAN> 
<DIV class=dtree></DIV>
<SCRIPT type=text/javascript>
                function DevelopAll() {
                    if (!initTree) {
                        initTree = true;
                        $(".treediv").css("height", 500);
                        $.get("/function/gettree/13", function (data) {
                            eval(data);
                            $(".dtree").html(d);
                        });
                    }
                }
            </SCRIPT>
</DIV>
<DIV class=mainbox>
<DIV class=mainleft>
<DIV class=zxdetail>
<DIV class=title>当前位置：<B><A href="http://www.apihome.cn/">首页</A>&gt;<A 
href="http://www.apihome.cn/api/list/">API参考大全</A>&gt;<A 
href="http://www.apihome.cn/api/java/">java参考手册</A>&gt;<A 
href="http://www.apihome.cn/api/java/java.security">java.security</A></B>&gt;KeyStore</B> 
</DIV>
<DIV class=detail_title>
<H1>KeyStore(<A title=KeyStore使用的示例，例子等 
href="http://www.apihome.cn/example/java/KeyStore">示例</A>,<A 
title=查看使用KeyStore有可能出错的原因及解决方法 
href="http://www.apihome.cn/error/java/KeyStore">出错代码</A>)</H1>
<P class=writer></P></DIV>
<DIV class=detail_title2><SPAN style="MARGIN-LEFT: 260px"><B>出处</B>：JAVA</SPAN> 
<SPAN><B>作者</B>：JAVA</SPAN> <SPAN><B>阅读</B>：5794次</SPAN> </DIV>
<DIV class=detail_c>
<H2><FONT size=-1>java.security</FONT><BR>类 KeyStore</H2><PRE>java.lang.Object
  <IMG alt="继承者 " src="java_KeyStore_API之家,最大的中文API社区_files/inherit.gif"><B>java.security.KeyStore</B>
</PRE>
<HR>

<DL>
  <DT><PRE>public class <B>KeyStore</B><DT>extends Object</DT></PRE></DT></DL><PRE></PRE>
<P>此类表示密钥和证书的存储设施。 
<P><CODE>KeyStore</CODE> 管理不同类型的条目。每种类型的条目都实现 <CODE>KeyStore.Entry</CODE> 
接口。提供了三种基本的 <CODE>KeyStore.Entry</CODE> 实现： 
<UL>
  <LI><B>KeyStore.PrivateKeyEntry</B> 
  <P>此类型的条目保存一个加密的 
  <CODE>PrivateKey</CODE>，可以选择用受保护格式存储该私钥，以防止未授权访问。它还随附一个相应公钥的证书链。 
  <P>给定条目使用私钥和证书链进行自验证 (self-authentication)。应用此验证的包括软件发布组织，它们将 JAR 
  文件签名为发布和/或许可软件的一部分。 </P>
  <LI><B>KeyStore.SecretKeyEntry</B> 
  <P>此类型的条目保存一个加密的 <CODE>SecretKey</CODE>，可以选择用受保护格式存储该密钥，以防止未授权访问。 </P>
  <LI><B>KeyStore.TrustedCertificateEntry</B> 
  <P>此类型的条目包含一个属于另一方的单个公钥 <CODE>Certificate</CODE>。它被称为<I>可信证书</I>，因为 keystore 
  的所有者相信证书中的公钥确实属于该证书的 <I>subject</I>（所有者）所标识的身份。 
  <P>此类型的条目可用于验证其他方。 </P></LI></UL>
<P>KeyStore 中的每一条目都用 “alias” 
字符串标识。对于私钥及其关联的证书链，这些字符串用于区分实体验证自身可以采用的不同方式。例如，实体可以使用不同的证书授权或不同的公钥算法来验证自身。 
<P>别名是否区分大小写与实现有关。为了避免出现问题，建议不要在 KeyStore 中使用只有大小写区别的别名。 
<P>在这里没有指定 keystore 是否是持久性的，也没有指定 keystore 
是持久性时所使用的机制。这允许使用各种技术保护敏感的（例如，私有的或秘密的）密钥。一种选择是使用智能卡或其他集成加密引擎 
(SafeKeyper)，也可以（以各种格式）使用文件之类更为简单的机制。 
<P>请求 KeyStore 对象的典型方式包括使用默认类型和提供一个特定的 keystore 类型。 
<UL>
  <LI>使用默认类型： <PRE>    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
 </PRE>系统将返回默认类型的 keystore 实现。 
  <P></P>
  <LI>提供特定的 keystore 类型： <PRE>      KeyStore ks = KeyStore.getInstance("JKS");
 </PRE>系统将返回环境中可用的指定 keystore 类型的首选实现。 
  <P></P></LI></UL>
<P>必须先加载 keystore 才能对其进行访问。 <PRE>    KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());

    // get user password and file input stream
    char[] password = getPassword();

    java.io.FileInputStream fis = null;
    try {
        fis = new java.io.FileInputStream("keyStoreName");
        ks.load(fis, password);
    } finally {
        if (fis != null) {
            fis.close();
        }
    }
 </PRE>要使用上述 <CODE>load</CODE> 方法创建一个空 keystore，传递 <CODE>null</CODE> 作为 
<CODE>InputStream</CODE> 的参数。 
<P>一旦加载了 keystore，就能够从 keystore 读取现有条目，或向 keystore 写入新条目： <PRE>    // get my private key
    KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)
        ks.getEntry("privateKeyAlias", password);
    PrivateKey myPrivateKey = pkEntry.getPrivateKey();

    // save my secret key
    javax.crypto.SecretKey mySecretKey;
    KeyStore.SecretKeyEntry skEntry =
        new KeyStore.SecretKeyEntry(mySecretKey);
    ks.setEntry("secretKeyAlias", skEntry, 
        new KeyStore.PasswordProtection(password));

    // store away the keystore
    java.io.FileOutputStream fos = null;
    try {
        fos = new java.io.FileOutputStream("newKeyStoreName");
        ks.store(fos, password);
    } finally {
        if (fos != null) {
            fos.close();
        }
    }
 </PRE>注意，可以使用相同的密码加载 keystore、保护私钥条目、保护秘密密钥条目以及存储 
keystore（如上文示例代码所示），也可以使用不同的密码或其他保护参数。 
<P>
<P>
<DL>
  <DT><B>从以下版本开始：</B></DT>
  <DD>1.2</DD>
  <DT><B>另请参见：</B>
  <DD>PrivateKey, SecretKey, Certificate</DD></DL>
<HR>

<P><!-- ======== NESTED CLASS SUMMARY ======== --></P>
<TABLE border=1 cellSpacing=0 summary="" cellPadding=3 width="100%">
  <TBODY>
  <TR class=TableHeadingColor bgColor=#ccccff>
    <TH colSpan=2 align=left><FONT size=+2><B>嵌套类摘要</B></FONT></TH></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;class</CODE></FONT></TD>
    <TD><CODE><B>KeyStore.Builder</B></CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将被实例化的 
      KeyStore 对象的描述。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;class</CODE></FONT></TD>
    <TD><CODE><B>KeyStore.CallbackHandlerProtection</B></CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;封装 
      CallbackHandler 的 ProtectionParameter。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;interface</CODE></FONT></TD>
    <TD><CODE><B>KeyStore.Entry</B></CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于 
      <CODE>KeyStore</CODE> 项类型的标记接口。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;interface</CODE></FONT></TD>
    <TD><CODE><B>KeyStore.LoadStoreParameter</B></CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于 
      <CODE>KeyStore</CODE> load 和 store 参数的标记接口。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;class</CODE></FONT></TD>
    <TD><CODE><B>KeyStore.PasswordProtection</B></CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<CODE>ProtectionParameter</CODE> 
      的一个基于密码的实现。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;class</CODE></FONT></TD>
    <TD><CODE><B>KeyStore.PrivateKeyEntry</B></CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;保存 
      <CODE>PrivateKey</CODE> 和相应证书链的 <CODE>KeyStore</CODE> 项。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;interface</CODE></FONT></TD>
    <TD><CODE><B>KeyStore.ProtectionParameter</B></CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于 
      keystore 保护参数的标记接口。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;class</CODE></FONT></TD>
    <TD><CODE><B>KeyStore.SecretKeyEntry</B></CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;保存 
      <CODE>SecretKey</CODE> 的 <CODE>KeyStore</CODE> 项。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;class</CODE></FONT></TD>
    <TD><CODE><B>KeyStore.TrustedCertificateEntry</B></CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;保存可信的 
      <CODE>Certificate</CODE> 的 <CODE>KeyStore</CODE> 
项。</TD></TR></TBODY></TABLE>&nbsp; <!-- ======== CONSTRUCTOR SUMMARY ======== -->
<TABLE border=1 cellSpacing=0 summary="" cellPadding=3 width="100%">
  <TBODY>
  <TR class=TableHeadingColor bgColor=#ccccff>
    <TH colSpan=2 align=left><FONT size=+2><B>构造方法摘要</B></FONT></TH></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT size=-1><CODE>protected 
      </CODE></FONT></TD>
    <TD><CODE><B>KeyStore</B>(KeyStoreSpi&nbsp;keyStoreSpi, 
      Provider&nbsp;provider, String&nbsp;type)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;创建给定类型的 
      KeyStore 对象，并在其中封装给定的提供者实现（SPI 对象）。</TD></TR></TBODY></TABLE>&nbsp; <!-- ========== METHOD SUMMARY =========== -->
<TABLE border=1 cellSpacing=0 summary="" cellPadding=3 width="100%">
  <TBODY>
  <TR class=TableHeadingColor bgColor=#ccccff>
    <TH colSpan=2 align=left><FONT size=+2><B>方法摘要</B></FONT></TH></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;Enumeration&lt;String&gt;</CODE></FONT></TD>
    <TD><CODE><B>aliases</B>()</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;列出此 
      keystore 的所有别名。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B>containsAlias</B>(String&nbsp;alias)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;检查给定别名是否存在于此 
      keystore 中。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B>deleteEntry</B>(String&nbsp;alias)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除此 
      keystore 中给定别名标识的条目。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B>entryInstanceOf</B>(String&nbsp;alias, Class&lt;? extends 
      KeyStore.Entry&gt;&nbsp;entryClass)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;确定指定 
      <CODE>alias</CODE> 的 keystore <CODE>Entry</CODE> 是否是指定 
      <CODE>entryClass</CODE> 的实例或子类。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;Certificate</CODE></FONT></TD>
    <TD><CODE><B>getCertificate</B>(String&nbsp;alias)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回与给定别名关联的证书。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;String</CODE></FONT></TD>
    <TD><CODE><B>getCertificateAlias</B>(Certificate&nbsp;cert)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回证书与给定证书匹配的第一个 
      keystore 条目的别名。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;Certificate[]</CODE></FONT></TD>
    <TD><CODE><B>getCertificateChain</B>(String&nbsp;alias)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回与给定别名关联的证书链。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;Date</CODE></FONT></TD>
    <TD><CODE><B>getCreationDate</B>(String&nbsp;alias)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回给定别名标识的条目的创建日期。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;String</CODE></FONT></TD>
    <TD><CODE><B>getDefaultType</B>()</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回 Java 
      安全属性文件中指定的默认 keystore 类型；如果不存在此类属性，则返回字符串 "jks"（"Java keystore" 
  的首字母缩写）。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;KeyStore.Entry</CODE></FONT></TD>
    <TD><CODE><B>getEntry</B>(String&nbsp;alias, 
      KeyStore.ProtectionParameter&nbsp;protParam)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用指定保护参数获取指定别名的 
      keystore <CODE>Entry</CODE>。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;KeyStore</CODE></FONT></TD>
    <TD><CODE><B>getInstance</B>(String&nbsp;type)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回指定类型的 
      keystore 对象。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;KeyStore</CODE></FONT></TD>
    <TD><CODE><B>getInstance</B>(String&nbsp;type, 
      Provider&nbsp;provider)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回指定类型的 
      keystore 对象。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>static&nbsp;KeyStore</CODE></FONT></TD>
    <TD><CODE><B>getInstance</B>(String&nbsp;type, 
      String&nbsp;provider)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回指定类型的 
      keystore 对象。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;Key</CODE></FONT></TD>
    <TD><CODE><B>getKey</B>(String&nbsp;alias, char[]&nbsp;password)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回与给定别名关联的密钥，并用给定密码来恢复它。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;Provider</CODE></FONT></TD>
    <TD><CODE><B>getProvider</B>()</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回此 
      keystore 的提供者。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;String</CODE></FONT></TD>
    <TD><CODE><B>getType</B>()</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;返回此 
      keystore 的类型。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B>isCertificateEntry</B>(String&nbsp;alias)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果给定别名标识的条目是通过调用 
      <CODE>setCertificateEntry</CODE> 或者以 <CODE>TrustedCertificateEntry</CODE> 
      为参数的 <CODE>setEntry</CODE> 创建的，则返回 true。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;boolean</CODE></FONT></TD>
    <TD><CODE><B>isKeyEntry</B>(String&nbsp;alias)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果给定别名标识的条目是通过调用 
      <CODE>setKeyEntry</CODE> 或者以 <CODE>PrivateKeyEntry</CODE> 或 
      <CODE>SecretKeyEntry</CODE> 为参数的 <CODE>setEntry</CODE> 创建的，则返回 true。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B>load</B>(InputStream&nbsp;stream, 
      char[]&nbsp;password)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从给定输入流中加载此 
      KeyStore。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B>load</B>(KeyStore.LoadStoreParameter&nbsp;param)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用给定 
      <CODE>LoadStoreParameter</CODE> 加载此 keystore。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B>setCertificateEntry</B>(String&nbsp;alias, 
      Certificate&nbsp;cert)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将给定可信证书分配给给定别名。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B>setEntry</B>(String&nbsp;alias, KeyStore.Entry&nbsp;entry, 
      KeyStore.ProtectionParameter&nbsp;protParam)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用指定别名保存 
      keystore <CODE>Entry</CODE>。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B>setKeyEntry</B>(String&nbsp;alias, byte[]&nbsp;key, 
      Certificate[]&nbsp;chain)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将给定密钥（已经被保护）分配给给定别名。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B>setKeyEntry</B>(String&nbsp;alias, Key&nbsp;key, 
      char[]&nbsp;password, Certificate[]&nbsp;chain)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将给定的密钥分配给给定的别名，并用给定密码保护它。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;int</CODE></FONT></TD>
    <TD><CODE><B>size</B>()</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;获取此 
      keystore 中条目数。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B>store</B>(KeyStore.LoadStoreParameter&nbsp;param)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用给定 
      <CODE>LoadStoreParameter</CODE> 存储此 keystore。</TD></TR>
  <TR class=TableRowColor bgColor=white>
    <TD vAlign=top width="1%" align=right><FONT 
      size=-1><CODE>&nbsp;void</CODE></FONT></TD>
    <TD><CODE><B>store</B>(OutputStream&nbsp;stream, 
      char[]&nbsp;password)</CODE> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将此 
      keystore 存储到给定输出流，并用给定密码保护其完整性。</TD></TR></TBODY></TABLE>&nbsp; 
<TABLE border=1 cellSpacing=0 summary="" cellPadding=3 width="100%">
  <TBODY>
  <TR class=TableSubHeadingColor bgColor=#eeeeff>
    <TH align=left><B>从类 java.lang.Object 继承的方法</B></TH></TR>
  <TR class=TableRowColor bgColor=white>
    <TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, 
      toString, wait, wait, wait</CODE></TD></TR></TBODY></TABLE>&nbsp; 
<P><!-- ========= CONSTRUCTOR DETAIL ======== --></P>
<TABLE border=1 cellSpacing=0 summary="" cellPadding=3 width="100%">
  <TBODY>
  <TR class=TableHeadingColor bgColor=#ccccff>
    <TH colSpan=1 align=left><FONT 
size=+2><B>构造方法详细信息</B></FONT></TH></TR></TBODY></TABLE>
<H3>KeyStore</H3><PRE>protected <B>KeyStore</B>(KeyStoreSpi&nbsp;keyStoreSpi,
                   Provider&nbsp;provider,
                   String&nbsp;type)</PRE>
<DL>
  <DD>创建给定类型的 KeyStore 对象，并在其中封装给定的提供者实现（SPI 对象）。 
  <P>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>keyStoreSpi</CODE> - 提供者实现
    <DD><CODE>provider</CODE> - 提供者
    <DD><CODE>type</CODE> - keystore 类型。</DD></DL></DD></DL><!-- ============ METHOD DETAIL ========== -->
<TABLE border=1 cellSpacing=0 summary="" cellPadding=3 width="100%">
  <TBODY>
  <TR class=TableHeadingColor bgColor=#ccccff>
    <TH colSpan=1 align=left><FONT 
size=+2><B>方法详细信息</B></FONT></TH></TR></TBODY></TABLE>
<H3>getInstance</H3><PRE>public static KeyStore <B>getInstance</B>(String&nbsp;type)
                            throws KeyStoreException</PRE>
<DL>
  <DD>返回指定类型的 keystore 对象。 
  <P>此方法从首选 Provider 开始遍历已注册安全提供者列表。返回一个封装 KeyStoreSpi 实现的新 KeyStore 
  对象，该实现取自第一个支持指定类型的 Provider。 
  <P>注意，可以通过 Security.getProviders() 方法获取已注册提供者列表。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>type</CODE> - keystore 类型。有关标准 keystore 类型的信息，请参阅 <A 
    href="http://www.apihome.cn/technotes/guides/security/crypto/CryptoSpec.html#AppA">Java 
    Cryptography Architecture API Specification &amp; Reference </A>中的附录 A。 
    <DT><B>返回：</B>
    <DD>指定类型的 keystore 对象。 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果没有 Provider 支持指定类型的 KeyStoreSpi 实现。
    <DT><B>另请参见：</B>
    <DD>Provider</DD></DL></DD></DL>
<HR>

<H3>getInstance</H3><PRE>public static KeyStore <B>getInstance</B>(String&nbsp;type,
                                   String&nbsp;provider)
                            throws KeyStoreException,
                                   NoSuchProviderException</PRE>
<DL>
  <DD>返回指定类型的 keystore 对象。 
  <P>返回一个封装 KeyStoreSpi 实现的新 KeyStore 对象，该实现取自指定提供者。指定提供者必须在安全提供者列表中注册。 
  <P>注意，可以通过 Security.getProviders() 方法获取已注册提供者列表。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>type</CODE> - keystore 类型。有关标准 keystore 类型的信息，请参阅 <A 
    href="http://www.apihome.cn/technotes/guides/security/crypto/CryptoSpec.html#AppA">Java 
    Cryptography Architecture API Specification &amp; Reference </A>中的附录 A。
    <DD><CODE>provider</CODE> - 提供者的名称。 
    <DT><B>返回：</B>
    <DD>指定类型的 keystore 对象。 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果不能从指定提供者获得指定类型的 KeyStoreSpi 实现。 
    <DD><CODE>NoSuchProviderException</CODE> - 如果指定提供者未在安全提供者列表中注册。 
    <DD><CODE>IllegalArgumentException</CODE> - 如果提供者的名称为 null 或空。
    <DT><B>另请参见：</B>
    <DD>Provider</DD></DL></DD></DL>
<HR>

<H3>getInstance</H3><PRE>public static KeyStore <B>getInstance</B>(String&nbsp;type,
                                   Provider&nbsp;provider)
                            throws KeyStoreException</PRE>
<DL>
  <DD>返回指定类型的 keystore 对象。 
  <P>返回一个封装 KeyStoreSpi 实现的新 KeyStore 对象，该实现取自指定 Provider 对象。注意，指定 Provider 
  对象无需在提供者列表中注册。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>type</CODE> - keystore 类型。有关标准 keystore 类型的信息，请参阅 <A 
    href="http://www.apihome.cn/technotes/guides/security/crypto/CryptoSpec.html#AppA">Java 
    Cryptography Architecture API Specification &amp; Reference </A>中的附录 A。
    <DD><CODE>provider</CODE> - 提供者。 
    <DT><B>返回：</B>
    <DD>指定类型的 keystore 对象。 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果不能从指定 Provider 对象获得指定类型的 KeyStoreSpi 
    实现。 
    <DD><CODE>IllegalArgumentException</CODE> - 如果指定提供者为 null。
    <DT><B>从以下版本开始：</B></DT>
    <DD>1.4</DD>
    <DT><B>另请参见：</B>
    <DD>Provider</DD></DL></DD></DL>
<HR>

<H3>getDefaultType</H3><PRE>public static final String <B>getDefaultType</B>()</PRE>
<DL>
  <DD>返回 Java 安全属性文件中指定的默认 keystore 类型；如果不存在此类属性，则返回字符串 "jks"（"Java keystore" 
  的首字母缩写）。Java 安全属性文件位于名为 &lt;JAVA_HOME&gt;/lib/security/java.security 
  的文件中。&lt;JAVA_HOME&gt; 引用 java.home 系统属性的值，并指定安装 JRE 的目录。 
  <P>调用某个 <CODE>getInstance</CODE> 方法时不希望使用固定编码 (hard coded) keystore 
  类型的应用程序，以及用户未指定 keystore 类型时希望提供默认 keystore 类型的应用程序可以使用默认的 keystore 类型。 
  <P>通过将 "keystore.type" 安全属性（在 Java 安全属性文件中）的值设置为所需的 keystore 类型，可以更改默认的 
  keystore 类型。 
  <P></P>
  <DD>
  <DL>
    <DT><B>返回：</B>
    <DD>Java 安全属性文件中指定的默认 keystore 类型；如果不存在此类属性，则返回字符串 "jks"。</DD></DL></DD></DL>
<HR>

<H3>getProvider</H3><PRE>public final Provider <B>getProvider</B>()</PRE>
<DL>
  <DD>返回此 keystore 的提供者。 
  <P></P>
  <DD>
  <DL>
    <DT><B>返回：</B>
    <DD>此 keystore 的提供者。</DD></DL></DD></DL>
<HR>

<H3>getType</H3><PRE>public final String <B>getType</B>()</PRE>
<DL>
  <DD>返回此 keystore 的类型。 
  <P></P>
  <DD>
  <DL>
    <DT><B>返回：</B>
    <DD>此 keystore 的类型。</DD></DL></DD></DL>
<HR>

<H3>getKey</H3><PRE>public final Key <B>getKey</B>(String&nbsp;alias,
                        char[]&nbsp;password)
                 throws KeyStoreException,
                        NoSuchAlgorithmException,
                        UnrecoverableKeyException</PRE>
<DL>
  <DD>返回与给定别名关联的密钥，并用给定密码来恢复它。必须已经通过调用 <CODE>setKeyEntry</CODE>，或者以 
  <CODE>PrivateKeyEntry</CODE> 或 <CODE>SecretKeyEntry</CODE> 为参数的 
  <CODE>setEntry</CODE> 关联密钥与别名。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 别名
    <DD><CODE>password</CODE> - 用于恢复密钥的密码 
    <DT><B>返回：</B>
    <DD>请求的密钥；如果给定别名不存在或不标识与密钥相关的条目，则返回 null。 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）。 
    <DD><CODE>NoSuchAlgorithmException</CODE> - 如果不能找到恢复密钥的算法 
    <DD><CODE>UnrecoverableKeyException</CODE> - 
  如果不能恢复密钥（例如，给定密码错误）。</DD></DL></DD></DL>
<HR>

<H3>getCertificateChain</H3><PRE>public final Certificate[] <B>getCertificateChain</B>(String&nbsp;alias)
                                        throws KeyStoreException</PRE>
<DL>
  <DD>返回与给定别名关联的证书链。必须已经通过调用 <CODE>setKeyEntry</CODE>，或者以 
  <CODE>PrivateKeyEntry</CODE> 为参数的 <CODE>setEntry</CODE> 关联证书链与别名。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 别名 
    <DT><B>返回：</B>
    <DD>证书链（按用户证书在前，根证书授权在后的顺序）；如果给定别名不存在或不包含证书链，则返回 null 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）。</DD></DL></DD></DL>
<HR>

<H3>getCertificate</H3><PRE>public final Certificate <B>getCertificate</B>(String&nbsp;alias)
                                 throws KeyStoreException</PRE>
<DL>
  <DD>返回与给定别名关联的证书。 
  <P>如果给定的别名标识通过调用 <CODE>setCertificateEntry</CODE> 创建的条目，或者通过调用以 
  <CODE>TrustedCertificateEntry</CODE> 为参数的 <CODE>setEntry</CODE> 
  创建的条目，则返回包含在该条目中的可信证书。 
  <P>如果给定的别名标识通过调用 <CODE>setKeyEntry</CODE> 创建的条目，或者通过调用以 
  <CODE>PrivateKeyEntry</CODE> 为参数的 <CODE>setEntry</CODE> 
  创建的条目，则返回该条目中证书链的第一个元素。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 别名 
    <DT><B>返回：</B>
    <DD>证书；如果给定别名不存在或不包含证书，则返回 null。 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）。</DD></DL></DD></DL>
<HR>

<H3>getCreationDate</H3><PRE>public final Date <B>getCreationDate</B>(String&nbsp;alias)
                           throws KeyStoreException</PRE>
<DL>
  <DD>返回给定别名标识的条目的创建日期。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 别名 
    <DT><B>返回：</B>
    <DD>此条目的创建日期；如果给定的别名不存在，则返回 null 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）。</DD></DL></DD></DL>
<HR>

<H3>setKeyEntry</H3><PRE>public final void <B>setKeyEntry</B>(String&nbsp;alias,
                              Key&nbsp;key,
                              char[]&nbsp;password,
                              Certificate[]&nbsp;chain)
                       throws KeyStoreException</PRE>
<DL>
  <DD>将给定的密钥分配给给定的别名，并用给定密码保护它。 
  <P>如果给定密钥的类型为 <CODE>java.security.PrivateKey</CODE>，则它必须附带证明相应公钥的证书链。 
  <P>如果给定别名已经存在，则与别名关联的 keystore 信息将被给定密钥（还可能包括证书链）重写。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 别名
    <DD><CODE>key</CODE> - 要与别名关联的密钥
    <DD><CODE>password</CODE> - 保护密钥的密码
    <DD><CODE>chain</CODE> - 相应公钥的证书链（只在给定密钥的类型为 
    <CODE>java.security.PrivateKey</CODE> 时需要）。 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 
    尚未被初始化（加载）、无法保护给定的密钥，或者此操作由于某些其他原因而失败</DD></DL></DD></DL>
<HR>

<H3>setKeyEntry</H3><PRE>public final void <B>setKeyEntry</B>(String&nbsp;alias,
                              byte[]&nbsp;key,
                              Certificate[]&nbsp;chain)
                       throws KeyStoreException</PRE>
<DL>
  <DD>将给定密钥（已经被保护）分配给给定别名。 
  <P>如果受保护密钥的类型为 <CODE>java.security.PrivateKey</CODE>，则它必须附带证明相应公钥的证书链。如果底层 
  keystore 实现的类型为 <CODE>jks</CODE>，则必须根据 PKCS #8 标准中的定义将 <CODE>key</CODE> 编码为 
  <CODE>EncryptedPrivateKeyInfo</CODE>。 
  <P>如果给定别名已经存在，则与别名关联的 keystore 信息将被给定密钥（还可能包括证书链）重写。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 别名
    <DD><CODE>key</CODE> - 要与别名关联的密钥（以受保护格式）
    <DD><CODE>chain</CODE> - 相应公钥的证书链（只在受保护密钥的类型为 
    <CODE>java.security.PrivateKey</CODE> 时有用）。 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 
    尚未被初始化（加载），或者此操作由于某些其他原因而失败。</DD></DL></DD></DL>
<HR>

<H3>setCertificateEntry</H3><PRE>public final void <B>setCertificateEntry</B>(String&nbsp;alias,
                                      Certificate&nbsp;cert)
                               throws KeyStoreException</PRE>
<DL>
  <DD>将给定可信证书分配给给定别名。 
  <P>如果给定别名标识通过调用 <CODE>setCertificateEntry</CODE> 创建的现有条目，或者通过调用以 
  <CODE>TrustedCertificateEntry</CODE> 为参数的 <CODE>setEntry</CODE> 
  创建的现有条目，则现有条目中的可信证书将被给定证书重写。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 别名
    <DD><CODE>cert</CODE> - 证书 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 
    尚未被初始化，或者给定别名已存在但不标识包含可信证书的条目，或者此操作由于其他某些原因失败。</DD></DL></DD></DL>
<HR>

<H3>deleteEntry</H3><PRE>public final void <B>deleteEntry</B>(String&nbsp;alias)
                       throws KeyStoreException</PRE>
<DL>
  <DD>删除此 keystore 中给定别名标识的条目。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 别名 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 
  尚未被初始化，或者条目不能被移除。</DD></DL></DD></DL>
<HR>

<H3>aliases</H3><PRE>public final Enumeration&lt;String&gt; <B>aliases</B>()
                                  throws KeyStoreException</PRE>
<DL>
  <DD>列出此 keystore 的所有别名。 
  <P></P>
  <DD>
  <DL>
    <DT><B>返回：</B>
    <DD>别名的枚举 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）。</DD></DL></DD></DL>
<HR>

<H3>containsAlias</H3><PRE>public final boolean <B>containsAlias</B>(String&nbsp;alias)
                            throws KeyStoreException</PRE>
<DL>
  <DD>检查给定别名是否存在于此 keystore 中。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 别名 
    <DT><B>返回：</B>
    <DD>如果别名存在，则返回 true；否则返回 false 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）。</DD></DL></DD></DL>
<HR>

<H3>size</H3><PRE>public final int <B>size</B>()
               throws KeyStoreException</PRE>
<DL>
  <DD>获取此 keystore 中条目数。 
  <P></P>
  <DD>
  <DL>
    <DT><B>返回：</B>
    <DD>此 keystore 中的条目数 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）。</DD></DL></DD></DL>
<HR>

<H3>isKeyEntry</H3><PRE>public final boolean <B>isKeyEntry</B>(String&nbsp;alias)
                         throws KeyStoreException</PRE>
<DL>
  <DD>如果给定别名标识的条目是通过调用 <CODE>setKeyEntry</CODE> 或者以 <CODE>PrivateKeyEntry</CODE> 
  或 <CODE>SecretKeyEntry</CODE> 为参数的 <CODE>setEntry</CODE> 创建的，则返回 true。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 要检查的 keystore 条目的别名 
    <DT><B>返回：</B>
    <DD>如果给定别名标识的条目是与密钥相关的条目，则返回 true；否则返回 false。 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）。</DD></DL></DD></DL>
<HR>

<H3>isCertificateEntry</H3><PRE>public final boolean <B>isCertificateEntry</B>(String&nbsp;alias)
                                 throws KeyStoreException</PRE>
<DL>
  <DD>如果给定别名标识的条目是通过调用 <CODE>setCertificateEntry</CODE> 或者以 
  <CODE>TrustedCertificateEntry</CODE> 为参数的 <CODE>setEntry</CODE> 创建的，则返回 true。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 要检查的 keystore 条目的别名 
    <DT><B>返回：</B>
    <DD>如果给定别名标识的条目包含一个可信证书，则返回 true；否则返回 false。 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）。</DD></DL></DD></DL>
<HR>

<H3>getCertificateAlias</H3><PRE>public final String <B>getCertificateAlias</B>(Certificate&nbsp;cert)
                                 throws KeyStoreException</PRE>
<DL>
  <DD>返回证书与给定证书匹配的第一个 keystore 条目的别名。 
  <P>此方法尝试将给定证书与每一个 keystore 条目匹配。如果认为条目是通过调用 <CODE>setCertificateEntry</CODE> 
  或者以 <CODE>TrustedCertificateEntry</CODE> 为参数的 <CODE>setEntry</CODE> 
  创建的，则将给定证书与该条目的证书进行比较。 
  <P>如果认为条目是通过调用 <CODE>setKeyEntry</CODE> 或者以 <CODE>PrivateKeyEntry</CODE> 为参数的 
  <CODE>setEntry</CODE> 创建的，则将给定证书与该条目证书链的第一个元素进行比较。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>cert</CODE> - 要匹配的证书 
    <DT><B>返回：</B>
    <DD>带有匹配证书的第一个条目的别名；如果此 keystore 中不存在这种条目，则返回 null。 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）。</DD></DL></DD></DL>
<HR>

<H3>store</H3><PRE>public final void <B>store</B>(OutputStream&nbsp;stream,
                        char[]&nbsp;password)
                 throws KeyStoreException,
                        IOException,
                        NoSuchAlgorithmException,
                        CertificateException</PRE>
<DL>
  <DD>将此 keystore 存储到给定输出流，并用给定密码保护其完整性。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>stream</CODE> - 要写入此 keystore 的输出流。
    <DD><CODE>password</CODE> - 生成 keystore 完整性检验的密码 
    <DT><B>抛出：</B> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）。 
    <DD><CODE>IOException</CODE> - 如果存在数据 I/O 问题 
    <DD><CODE>NoSuchAlgorithmException</CODE> - 如果不存在恰当的数据完整性算法 
    <DD><CODE>CertificateException</CODE> - 如果 keystore 
数据中包含无法存储的证书</DD></DL></DD></DL>
<HR>

<H3>store</H3><PRE>public final void <B>store</B>(KeyStore.LoadStoreParameter&nbsp;param)
                 throws KeyStoreException,
                        IOException,
                        NoSuchAlgorithmException,
                        CertificateException</PRE>
<DL>
  <DD>使用给定 <CODE>LoadStoreParameter</CODE> 存储此 keystore。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>param</CODE> - 指定如何存储 keystore 的 
    <CODE>LoadStoreParameter</CODE>，该参数可以为 <CODE>null</CODE> 
    <DT><B>抛出：</B> 
    <DD><CODE>IllegalArgumentException</CODE> - 如果无法识别给定的 
    <CODE>LoadStoreParameter</CODE> 输入 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载） 
    <DD><CODE>IOException</CODE> - 如果存在数据 I/O 问题 
    <DD><CODE>NoSuchAlgorithmException</CODE> - 如果不存在恰当的数据完整性算法 
    <DD><CODE>CertificateException</CODE> - 如果 keystore 数据中包含无法存储的证书
    <DT><B>从以下版本开始：</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>

<H3>load</H3><PRE>public final void <B>load</B>(InputStream&nbsp;stream,
                       char[]&nbsp;password)
                throws IOException,
                       NoSuchAlgorithmException,
                       CertificateException</PRE>
<DL>
  <DD>从给定输入流中加载此 KeyStore。 
  <P>可以给定一个密码来解锁 keystore（例如，驻留在硬件标记设备上的 keystore）或检验 keystore 
  数据的完整性。如果没有指定用于完整性检验的密码，则不会执行完整性检验。 
  <P>如果要创建空 keystore，或者不能从流中初始化 keystore，则传递 <CODE>null</CODE> 作为 
  <CODE>stream</CODE> 的参数。 
  <P>注意，如果此 keystore 已经被加载，那么它将被重新初始化，并再次从给定输入流中加载。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>stream</CODE> - 从中加载 keystore 的输入流，或者 <CODE>null</CODE>
    <DD><CODE>password</CODE> - 用来检验 keystore 完整性的密码，用来解锁 keystore 的密码，或者 
    <CODE>null</CODE> 
    <DT><B>抛出：</B> 
    <DD><CODE>IOException</CODE> - 如果存在 keystore 数据 I/O 
    问题或格式问题，如果需要密码却没有指定，或者指定的密码错误。如果错误是由于密码错误引起的，那么 <CODE>IOException</CODE> 的 
    cause 应该是 <CODE>UnrecoverableKeyException</CODE> 
    <DD><CODE>NoSuchAlgorithmException</CODE> - 如果不存在用来检验 keystore 完整性的算法 
    <DD><CODE>CertificateException</CODE> - 如果不能加载 keystore 
中的任何证书</DD></DL></DD></DL>
<HR>

<H3>load</H3><PRE>public final void <B>load</B>(KeyStore.LoadStoreParameter&nbsp;param)
                throws IOException,
                       NoSuchAlgorithmException,
                       CertificateException</PRE>
<DL>
  <DD>使用给定 <CODE>LoadStoreParameter</CODE> 加载此 keystore。 
  <P>注意，如果此 KeyStore 已经被加载，那么它将被重新初始化，并再次从给定参数加载。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>param</CODE> - 指定如何加载 keystore 的 
    <CODE>LoadStoreParameter</CODE>，可以为 <CODE>null</CODE> 
    <DT><B>抛出：</B> 
    <DD><CODE>IllegalArgumentException</CODE> - 如果无法识别给定 
    <CODE>LoadStoreParameter</CODE> 输入 
    <DD><CODE>IOException</CODE> - 如果存在 keystore 数据 I/O 问题或格式问题。如果错误是由于 
    <CODE>ProtectionParameter</CODE> 不正确（如密码错误）引起的，那么 <CODE>IOException</CODE> 的 
    cause 应该是 <CODE>UnrecoverableKeyException</CODE> 
    <DD><CODE>NoSuchAlgorithmException</CODE> - 如果不存在用来检验 keystore 完整性的算法 
    <DD><CODE>CertificateException</CODE> - 如果不能加载 keystore 中的任何证书
    <DT><B>从以下版本开始：</B></DT>
    <DD>1.5</DD></DL></DD></DL>
<HR>

<H3>getEntry</H3><PRE>public final KeyStore.Entry <B>getEntry</B>(String&nbsp;alias,
                                     KeyStore.ProtectionParameter&nbsp;protParam)
                              throws NoSuchAlgorithmException,
                                     UnrecoverableEntryException,
                                     KeyStoreException</PRE>
<DL>
  <DD>使用指定保护参数获取指定别名的 keystore <CODE>Entry</CODE>。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 获取此别名的 keystore <CODE>Entry</CODE>
    <DD><CODE>protParam</CODE> - 用来保护 <CODE>Entry</CODE> 的 
    <CODE>ProtectionParameter</CODE>，可以为 <CODE>null</CODE> 
    <DT><B>返回：</B>
    <DD>指定别名的 keystore <CODE>Entry</CODE>；如果不存在这种条目，则返回 <CODE>null</CODE> 
    <DT><B>抛出：</B> 
    <DD><CODE>NullPointerException</CODE> - 如果 <CODE>alias</CODE> 为 
    <CODE>null</CODE> 
    <DD><CODE>NoSuchAlgorithmException</CODE> - 如果不存在用来恢复条目的算法 
    <DD><CODE>UnrecoverableEntryException</CODE> - 如果指定的 <CODE>protParam</CODE> 
    不足或无效 
    <DD><CODE>UnrecoverableKeyException</CODE> - 如果该条目是 
    <CODE>PrivateKeyEntry</CODE> 或 <CODE>SecretKeyEntry</CODE>，并且指定的 
    <CODE>protParam</CODE> 不包含恢复密钥所需的信息（如密码错误） 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）
    <DT><B>从以下版本开始：</B></DT>
    <DD>1.5</DD>
    <DT><B>另请参见：</B>
    <DD>setEntry(String, KeyStore.Entry, 
  KeyStore.ProtectionParameter)</DD></DL></DD></DL>
<HR>

<H3>setEntry</H3><PRE>public final void <B>setEntry</B>(String&nbsp;alias,
                           KeyStore.Entry&nbsp;entry,
                           KeyStore.ProtectionParameter&nbsp;protParam)
                    throws KeyStoreException</PRE>
<DL>
  <DD>用指定别名保存 keystore <CODE>Entry</CODE>。保护参数用来保护 <CODE>Entry</CODE>。 
  <P>如果指定别名的条目已经存在，它将被重写。 
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 以此别名保存 keystore <CODE>Entry</CODE>
    <DD><CODE>entry</CODE> - 要保存的 <CODE>Entry</CODE>
    <DD><CODE>protParam</CODE> - 用来保护 <CODE>Entry</CODE> 的 
    <CODE>ProtectionParameter</CODE>，可以为 <CODE>null</CODE> 
    <DT><B>抛出：</B> 
    <DD><CODE>NullPointerException</CODE> - 如果 <CODE>alias</CODE> 或 
    <CODE>entry</CODE> 为 <CODE>null</CODE> 
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载），或者此操作由于其他原因失败
    <DT><B>从以下版本开始：</B></DT>
    <DD>1.5</DD>
    <DT><B>另请参见：</B>
    <DD>getEntry(String, KeyStore.ProtectionParameter)</DD></DL></DD></DL>
<HR>

<H3>entryInstanceOf</H3><PRE>public final boolean <B>entryInstanceOf</B>(String&nbsp;alias,
                                     Class&lt;? extends KeyStore.Entry&gt;&nbsp;entryClass)
                              throws KeyStoreException</PRE>
<DL>
  <DD>确定指定 <CODE>alias</CODE> 的 keystore <CODE>Entry</CODE> 是否是指定 
  <CODE>entryClass</CODE> 的实例或子类。
  <P></P>
  <DD>
  <DL>
    <DT><B>参数：</B>
    <DD><CODE>alias</CODE> - 别名
    <DD><CODE>entryClass</CODE> - 条目的类
    <DT><B>返回：</B>
    <DD>true 如果指定 <CODE>alias</CODE> 的 keystore <CODE>Entry</CODE> 是指定 
    <CODE>entryClass</CODE> 的实例或子类，则返回 true；否则返回 false。
    <DT><B>抛出：</B>
    <DD><CODE>NullPointerException</CODE> - 如果 <CODE>alias</CODE> 或 
    <CODE>entryClass</CODE> 为 <CODE>null</CODE>
    <DD><CODE>KeyStoreException</CODE> - 如果 keystore 尚未被初始化（加载）
    <DT><B>从以下版本开始：</B></DT>
    <DD>1.5</DD></DL></DD></DL></DIV>
<DIV class=related>
<H2><A href="http://www.apihome.cn/tag/KeyStore">KeyStore类似用法</A></H2>
<UL>
  <LI><A title="" href="http://www.apihome.cn/api/android/KeyStore.html" 
  target=_blank>0KeyStore使用方法和示例</A> </LI></UL></DIV>
<DIV class=others>
<P>上一篇：<A title=KeyRep 
href="http://www.apihome.cn/api/java/KeyRep.html">KeyRep</A></P>
<P>下一篇：<A title=KeyStore.Builder 
href="http://www.apihome.cn/api/java/KeyStore.Builder.html">KeyStore.Builder</A></P></DIV>
<DIV class=thislabel>
<H2>本文标签</H2>
<P>
<H3></H3>
<P></P></DIV>
<DIV class=shareto><!-- Baidu Button BEGIN -->
<SCRIPT id=bdshare_js type=text/javascript 
data="type=slide&amp;img=2&amp;pos=right&amp;uid=599512"></SCRIPT>

<SCRIPT id=bdshell_js type=text/javascript></SCRIPT>

<SCRIPT type=text/javascript>
document.getElementById("bdshell_js").src="http://bdimg.share.baidu.com/static/js/shell_v2.js?cdnversion=" + Math.ceil(new Date()/3600000);
</SCRIPT>
<!-- Baidu Button END --></DIV></DIV></DIV></DIV>
<DIV class=clearBoth></DIV></DIV>
<DIV id=foot>
<DIV class=foottop>
<UL>
  <LI><SPAN>友情链接：</SPAN> <A title="android studio中文社区" 
  href="http://www.android-studio.com.cn/" target=_blank>android studio中文社区</A> 
  - <A href="http://www.apihome.cn/api/baidu/">百度API</A> - <A 
  href="http://www.apihome.cn/api/taobao/">淘宝API</A> - <A 
  href="http://www.apihome.cn/list/third/">更多</A></LI>
  <LI><SPAN>移动及微博：</SPAN> <A href="http://www.apihome.cn/api/ios/">iOS</A> - <A 
  href="http://www.apihome.cn/api/android/">Android</A> - <A 
  href="http://www.apihome.cn/api/weibo/">新浪微博</A>-<A 
  href="http://www.apihome.cn/api/tencentweibo/">腾讯微博</A> </LI></UL>
<UL>
  <LI><SPAN>支付平台：</SPAN> <A href="http://www.apihome.cn/api/alipay/">支付宝</A> - 
  <A href="http://www.apihome.cn/api/99bill/">快钱</A> - <A 
  href="http://www.apihome.cn/api/ebank/">网银</A> - <A 
  href="http://www.apihome.cn/api/tenpay/">财付通</A> - <A 
  href="http://www.apihome.cn/list/pay/">更多</A></LI>
  <LI><SPAN>程序语言:</SPAN> <A href="http://www.apihome.cn/api/c/%22%22">C/C++</A> 
  - <A href="http://www.apihome.cn/api/java/">JAVA</A> - <A 
  href="http://www.apihome.cn/api/donet/">.NET</A> - <A 
  href="http://www.apihome.cn/api/python/">Python</A>-<A 
  href="http://www.apihome.cn/api/ruby/">Ruby</A> </LI></UL>
<UL>
  <LI><SPAN>WEB：</SPAN> <A href="http://www.apihome.cn/api/php/">PHP</A> - <A 
  href="http://www.apihome.cn/api/javascript/">Javascript</A> - <A 
  href="http://www.apihome.cn/api/css3/">CSS3</A> - <A 
  href="http://www.apihome.cn/api/html5/">HTML5</A></LI>
  <LI><SPAN>微博：</SPAN> <A title=API之家新浪微博 
  href="http://weibo.com/u/3202364491">API之家新浪微博</A> - <A 
  href="http://t.qq.com/apihomecn">API之家QQ微博</A><A style="DISPLAY: none" 
  href="http://www.casecoco.com/">iPhone 6 cases</A>&gt;</LI></UL>
<DIV class=clearBoth></DIV></DIV>
<DIV class=copyR><SPAN>责任申明：本站内容均整理自互联网，若有侵权，请联系我们。使用本站提供的任务技术内容造成不良后果，本站不负任何责任。 
</SPAN><BR><SPAN>欢迎投稿,电子邮件：477600133#qq.com（#号换成@）&nbsp;&nbsp; QQ群1：518649948 
&nbsp;&nbsp; <A href="http://www.miitbeian.gov.cn/" 
target=_blank>备案号:闽ICP备12024207号</A></SPAN> </DIV>
<DIV class=clearBoth></DIV></DIV>
<SCRIPT type=text/javascript>
var _bdhmProtocol = (("https:" == document.location.protocol) ? " https://" : " http://");
document.write(unescape("%3Cscript src='" + _bdhmProtocol + "hm.baidu.com/h.js%3Fe5cedda4e187691097a06216aac1c0c8' type='text/javascript'%3E%3C/script%3E"));
</SCRIPT>

<SCRIPT type=text/javascript>
    /*120*240，创建于2010-5-28*/
var cpro_id = "u2029139";
</SCRIPT>

<SCRIPT type=text/javascript 
src="java_KeyStore_API之家,最大的中文API社区_files/f.js"></SCRIPT>
</BODY></HTML>
